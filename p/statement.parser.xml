<parserFile>
 <grammar name="StatementParser">
  <rule first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" name="Statement">
   <choice first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
    <choice first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
     <action first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
      <nonterminal first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="SimpleStatent"/>
     </action>
     <action first="{BEGIN, CASE, FOR, IF, REPEAT, WHILE}">
      <nonterminal first="{BEGIN, CASE, FOR, IF, REPEAT, WHILE}" ruleName="StructuredStatement"/>
     </action>
    </choice>
    <action first="{#}">
     <empty first="{#}"/>
    </action>
   </choice>
  </rule>
  <rule first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" name="SimpleStatent">
   <choice first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
    <action first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
     <nonterminal first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="AssignmentStatement"/>
    </action>
    <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
     <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="ProcedureStatement"/>
    </action>
   </choice>
  </rule>
  <rule first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" name="AssignmentStatement">
   <action first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
    <group first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
     <sequence first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
      <sequence first="{#, AND, ASSIGN, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
       <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="Expression"/>
       <token first="{ASSIGN}" name="ASSIGN"/>
      </sequence>
      <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="Expression"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" name="ProcedureStatement">
   <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
    <group first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
     <choice first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
      <sequence first="{ID}">
       <action first="{ID}">
        <nonterminal first="{ID}" ruleName="ProcedureIdentifier"/>
       </action>
       <nonterminal first="{LPAREN}" ruleName="ArgumentList"/>
      </sequence>
      <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
       <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="Expression"/>
      </action>
     </choice>
    </group>
   </action>
  </rule>
  <rule first="{ID}" name="ProcedureIdentifier">
   <action first="{ID}">
    <token first="{ID}" name="ID"/>
   </action>
  </rule>
  <rule first="{BEGIN, CASE, FOR, IF, REPEAT, WHILE}" name="StructuredStatement">
   <choice first="{BEGIN, CASE, FOR, IF, REPEAT, WHILE}">
    <choice first="{BEGIN, CASE, IF}">
     <action first="{BEGIN}">
      <nonterminal first="{BEGIN}" ruleName="CompoundStatement"/>
     </action>
     <action first="{CASE, IF}">
      <nonterminal first="{CASE, IF}" ruleName="ConditionalStatement"/>
     </action>
    </choice>
    <action first="{FOR, REPEAT, WHILE}">
     <nonterminal first="{FOR, REPEAT, WHILE}" ruleName="RepetitiveStatement"/>
    </action>
   </choice>
  </rule>
  <rule first="{BEGIN}" name="CompoundStatement">
   <action first="{BEGIN}">
    <group first="{BEGIN}">
     <sequence first="{BEGIN}">
      <sequence first="{BEGIN}">
       <sequence first="{BEGIN}">
        <action first="{BEGIN}">
         <token first="{BEGIN}" name="BEGIN"/>
        </action>
        <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
         <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
        </action>
       </sequence>
       <kleene first="{#, SEMICOLON}">
        <group first="{SEMICOLON}">
         <sequence first="{SEMICOLON}">
          <token first="{SEMICOLON}" name="SEMICOLON"/>
          <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
           <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
          </action>
         </sequence>
        </group>
       </kleene>
      </sequence>
      <token first="{END}" name="END"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{CASE, IF}" name="ConditionalStatement">
   <choice first="{CASE, IF}">
    <action first="{IF}">
     <nonterminal first="{IF}" ruleName="IfStatement"/>
    </action>
    <action first="{CASE}">
     <nonterminal first="{CASE}" ruleName="CaseStatement"/>
    </action>
   </choice>
  </rule>
  <rule first="{IF}" name="IfStatement">
   <action first="{IF}">
    <group first="{IF}">
     <sequence first="{IF}">
      <sequence first="{IF}">
       <sequence first="{IF}">
        <sequence first="{IF}">
         <token first="{IF}" name="IF"/>
         <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="Expression"/>
        </sequence>
        <token first="{THEN}" name="THEN"/>
       </sequence>
       <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
        <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
       </action>
      </sequence>
      <optional first="{#, ELSE}">
       <group first="{ELSE}">
        <sequence first="{ELSE}">
         <token first="{ELSE}" name="ELSE"/>
         <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
          <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
         </action>
        </sequence>
       </group>
      </optional>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{CASE}" name="CaseStatement">
   <action first="{CASE}">
    <group first="{CASE}">
     <sequence first="{CASE}">
      <sequence first="{CASE}">
       <sequence first="{CASE}">
        <sequence first="{CASE}">
         <sequence first="{CASE}">
          <sequence first="{CASE}">
           <sequence first="{CASE}">
            <token first="{CASE}" name="CASE"/>
            <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
             <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="Expression"/>
            </action>
           </sequence>
           <token first="{OF}" name="OF"/>
          </sequence>
          <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, COLON, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
           <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, COLON, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Case"/>
          </action>
         </sequence>
         <kleene first="{#, SEMICOLON}">
          <group first="{SEMICOLON}">
           <sequence first="{SEMICOLON}">
            <token first="{SEMICOLON}" name="SEMICOLON"/>
            <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, COLON, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
             <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, COLON, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Case"/>
            </action>
           </sequence>
          </group>
         </kleene>
        </sequence>
        <optional first="{#, ELSE}">
         <group first="{ELSE}">
          <action first="{ELSE}">
           <nonterminal first="{ELSE}" ruleName="ElsePart"/>
          </action>
         </group>
        </optional>
       </sequence>
       <optional first="{#, SEMICOLON}">
        <token first="{SEMICOLON}" name="SEMICOLON"/>
       </optional>
      </sequence>
      <token first="{END}" name="END"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, AND, ASSIGN, BASE, BEGIN, CASE, COLON, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" name="Case">
   <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, COLON, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
    <group first="{#, AND, ASSIGN, BASE, BEGIN, CASE, COLON, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
     <sequence first="{#, AND, ASSIGN, BASE, BEGIN, CASE, COLON, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
      <sequence first="{#, AND, BASE, COLON, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
       <sequence first="{#, AND, BASE, COMMA, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
        <sequence first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
         <action first="{#}">
          <empty first="{#}"/>
         </action>
         <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
          <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="ConstantRange"/>
         </action>
        </sequence>
        <kleene first="{#, COMMA}">
         <group first="{COMMA}">
          <sequence first="{COMMA}">
           <token first="{COMMA}" name="COMMA"/>
           <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
            <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="ConstantRange"/>
           </action>
          </sequence>
         </group>
        </kleene>
       </sequence>
       <token first="{COLON}" name="COLON"/>
      </sequence>
      <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
       <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
      </action>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" name="ConstantRange">
   <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
    <group first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
     <sequence first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, DOTDOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
      <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
       <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="ConstantExpression"/>
      </action>
      <optional first="{#, DOTDOT}">
       <group first="{DOTDOT}">
        <sequence first="{DOTDOT}">
         <token first="{DOTDOT}" name="DOTDOT"/>
         <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
          <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="ConstantExpression"/>
         </action>
        </sequence>
       </group>
      </optional>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{ELSE}" name="ElsePart">
   <sequence first="{ELSE}">
    <token first="{ELSE}" name="ELSE"/>
    <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
     <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
    </action>
   </sequence>
  </rule>
  <rule first="{FOR, REPEAT, WHILE}" name="RepetitiveStatement">
   <choice first="{FOR, REPEAT, WHILE}">
    <choice first="{REPEAT, WHILE}">
     <action first="{REPEAT}">
      <nonterminal first="{REPEAT}" ruleName="RepeatStatement"/>
     </action>
     <action first="{WHILE}">
      <nonterminal first="{WHILE}" ruleName="WhileStatement"/>
     </action>
    </choice>
    <action first="{FOR}">
     <nonterminal first="{FOR}" ruleName="ForStatement"/>
    </action>
   </choice>
  </rule>
  <rule first="{REPEAT}" name="RepeatStatement">
   <action first="{REPEAT}">
    <group first="{REPEAT}">
     <sequence first="{REPEAT}">
      <sequence first="{REPEAT}">
       <sequence first="{REPEAT}">
        <sequence first="{REPEAT}">
         <action first="{REPEAT}">
          <token first="{REPEAT}" name="REPEAT"/>
         </action>
         <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
          <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
         </action>
        </sequence>
        <kleene first="{#, SEMICOLON}">
         <group first="{SEMICOLON}">
          <sequence first="{SEMICOLON}">
           <token first="{SEMICOLON}" name="SEMICOLON"/>
           <action first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}">
            <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
           </action>
          </sequence>
         </group>
        </kleene>
       </sequence>
       <token first="{UNTIL}" name="UNTIL"/>
      </sequence>
      <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
       <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="Expression"/>
      </action>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{WHILE}" name="WhileStatement">
   <action first="{WHILE}">
    <group first="{WHILE}">
     <sequence first="{WHILE}">
      <sequence first="{WHILE}">
       <sequence first="{WHILE}">
        <token first="{WHILE}" name="WHILE"/>
        <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="Expression"/>
       </sequence>
       <token first="{DO}" name="DO"/>
      </sequence>
      <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{DOWNTO, TO}" name="Direction">
   <choice first="{DOWNTO, TO}">
    <action first="{TO}">
     <token first="{TO}" name="TO"/>
    </action>
    <action first="{DOWNTO}">
     <token first="{DOWNTO}" name="DOWNTO"/>
    </action>
   </choice>
  </rule>
  <rule first="{FOR}" name="ForStatement">
   <action first="{FOR}">
    <group first="{FOR}">
     <sequence first="{FOR}">
      <sequence first="{FOR}">
       <sequence first="{FOR}">
        <sequence first="{FOR}">
         <sequence first="{FOR}">
          <sequence first="{FOR}">
           <sequence first="{FOR}">
            <token first="{FOR}" name="FOR"/>
            <nonterminal first="{ID}" ruleName="ControlVariable"/>
           </sequence>
           <token first="{ASSIGN}" name="ASSIGN"/>
          </sequence>
          <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="InitialValue"/>
         </sequence>
         <nonterminal first="{DOWNTO, TO}" ruleName="Direction"/>
        </sequence>
        <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="FinalValue"/>
       </sequence>
       <token first="{DO}" name="DO"/>
      </sequence>
      <nonterminal first="{#, AND, ASSIGN, BASE, BEGIN, CASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, FOR, GREATER, GREATER_EQUAL, ID, IF, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, REPEAT, SHL, SHR, SLASH, STAR, THIS, TRUE, WHILE, XOR}" ruleName="Statement"/>
     </sequence>
    </group>
   </action>
  </rule>
  <rule first="{ID}" name="ControlVariable">
   <action first="{ID}">
    <nonterminal first="{ID}" ruleName="VariableIdentifier"/>
   </action>
  </rule>
  <rule first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" name="InitialValue">
   <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
    <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="Expression"/>
   </action>
  </rule>
  <rule first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" name="FinalValue">
   <action first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}">
    <nonterminal first="{#, AND, BASE, CONTROL_STRING, DIV, DOT, EQUAL, FALSE, GREATER, GREATER_EQUAL, ID, INTEGER_LITERAL, LBRACKET, LESS, LESS_EQUAL, LPAREN, MINUS, MOD, NEW, NIL, NOT, NOT_EQUAL, OR, PLUS, QUOTED_STRING, REAL_LITERAL, SHL, SHR, SLASH, STAR, THIS, TRUE, XOR}" ruleName="Expression"/>
   </action>
  </rule>
 </grammar>
</parserFile>
