program SyntaxDiagrams;

uses System.Graphics.Primitive, System.Graphics, Syntax;

type
  DiagramArray = array of Diagram;

var
  diagrams: DiagramArray;
  diagramCount: integer;
  x, y: integer;
  initialBitmap: Bitmap;
  initialGraphics: Graphics;

procedure AddDiagram(diagram: Diagram);
var
  newLength, i: integer;
  newDiagrams: DiagramArray;
begin
  if diagramCount = diagrams.Length then
  begin
    if diagrams.Length < 4 then newLength := 4 else newLength := 2 * diagrams.Length;
    newDiagrams := new Diagram[newLength];
    for i := 0 to diagramCount - 1 do newDiagrams[i] := diagrams[i];
    diagrams := newDiagrams;
  end;
  diagrams[diagramCount] := diagram;
  diagramCount := Succ(diagramCount);
end;

procedure MakeDiagrams();

  procedure MakeProgramHeadingDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    programKeyword: Keyword;
    programId: RuleBox;
    gap1, gap2: Gap;
    branch1, branch2: Branch;
    out: Out;
    programParameterList: RuleBox;
  begin
    title := new DiagramTitle('program-heading');
    diagram := new Diagram(title, 'program-heading.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    programKeyword := new Keyword('program');
    diagram.AddShape(0, 1, programKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    programId := new RuleBox('program-id');
    diagram.AddShape(0, 3, programId);
    branch1 := new Branch();
    diagram.AddShape(0, 4, branch1);
    programParameterList := new RuleBox('program-parameter-list');
    diagram.AddShape(1, 5, programParameterList);
    branch2 := new Branch();
    diagram.AddShape(0, 6, branch2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, programKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(programKeyword, programId, east, noDir));
    diagram.AddConnector(new SyntaxArrow(programId, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, programParameterList, south, east));
    diagram.AddConnector(new SyntaxArrow(programParameterList, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeProgramIdDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    out: Out;
    identifier: RuleBox;
    dot: Terminal;
    branch1, branch2: Branch;
  begin
    title := new DiagramTitle('program-id');
    diagram := new Diagram(title, 'program-id.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    dot := new Terminal('.');
    diagram.AddShape(1, 1, dot);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, dot, south, west));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(dot, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeUnitNameDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    out: Out;
    identifier: RuleBox;
    dot: Terminal;
    branch1, branch2: Branch;
  begin
    title := new DiagramTitle('unit-name');
    diagram := new Diagram(title, 'unit-name.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    dot := new Terminal('.');
    diagram.AddShape(1, 1, dot);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, dot, south, west));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(dot, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeProgramParameterListDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    branch1, branch2: Branch;
    out: Out;
    lparen, rparen: Terminal;
    identifierList: RuleBox;
  begin
    title := new DiagramTitle('program-parameter-list');
    diagram := new Diagram(title, 'program-parameter-list.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    lparen := new Terminal('(');
    diagram.AddShape(0, 1, lparen);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    identifierList := new RuleBox('identifier-list');
    diagram.AddShape(1, 3, identifierList);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    rparen := new Terminal(')');
    diagram.AddShape(0, 5, rparen);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rparen, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, identifierList, south, east));
    diagram.AddConnector(new SyntaxArrow(identifierList, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeIdentifierListDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    out: Out;
    identifier: RuleBox;
    comma: Terminal;
  begin
    title := new DiagramTitle('identifier-list');
    diagram := new Diagram(title, 'identifier-list.png');
    branch1 := new Branch();
    diagram.AddShape(0, 1, branch1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 2, identifier);
    comma := new Terminal(',');
    diagram.AddShape(1, 2, comma);
    branch2 := new Branch();
    diagram.AddShape(0, 3, branch2);
    out := new Out();
    diagram.AddShape(0, 4, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, comma, south, west));
    diagram.AddConnector(new SyntaxArrow(comma, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeUsesClauseDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    usesKeyword: Keyword;
    unitName: RuleBox;
    branch1, branch2: Branch;
    semicolon, comma: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('uses-clause');
    diagram := new Diagram(title, 'uses-clause.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    usesKeyword := new Keyword('uses');
    diagram.AddShape(0, 1, usesKeyword);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    unitName := new RuleBox('unit-name');
    diagram.AddShape(0, 3, unitName);
    branch1 := new Branch();
    diagram.AddShape(0, 4, branch1);
    semicolon := new Terminal(';');
    diagram.AddShape(0, 5, semicolon);
    comma := new Terminal(',');
    diagram.AddShape(1, 3, comma);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, usesKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(usesKeyword, unitName, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, comma, south, west));
    diagram.AddConnector(new SyntaxArrow(comma, branch2, west, north));
    diagram.AddConnector(new SyntaxArrow(unitName, semicolon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeProgramDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    programHeading: RuleBox;
    semicolon: Terminal;
    usesClause: RuleBox;
    block: RuleBox;
    dot: Terminal;
    gap1, gap2, gap3, gap4: Gap;
    branch1, branch2: Branch;
    out: Out;
  begin
    title := new DiagramTitle('program');
    diagram := new Diagram(title, 'program.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    programHeading := new RuleBox('program-heading');
    diagram.AddShape(0, 1, programHeading);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    semicolon := new Terminal(';');
    diagram.AddShape(0, 3, semicolon);
    branch1 := new Branch();
    diagram.AddShape(0, 4, branch1);
    usesClause := new RuleBox('uses-clause');
    diagram.AddShape(1, 5, usesClause);
    branch2 := new Branch();
    diagram.AddShape(0, 6, branch2);
    block := new RuleBox('block');
    diagram.AddShape(0, 7, block);
    gap3 := new Gap();
    diagram.AddShape(0, 8, gap3);
    dot := new Terminal('.');
    diagram.AddShape(0, 9, dot);
    gap4 := new Gap();
    diagram.AddShape(0, 10, gap4);
    out := new Out();
    diagram.AddShape(0, 11, out);
    diagram.AddConnector(new SyntaxArrow(title, programHeading, east, noDir));
    diagram.AddConnector(new SyntaxArrow(programHeading, semicolon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon, block, east, noDir));
    diagram.AddConnector(new SyntaxArrow(block, dot, east, noDir));
    diagram.AddConnector(new SyntaxArrow(dot, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, usesClause, south, east));
    diagram.AddConnector(new SyntaxArrow(usesClause, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeBlockDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3: Gap;
    declarationPart, statementPart: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('block');
    diagram := new Diagram(title, 'block.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    declarationPart := new RuleBox('declaration-part');
    diagram.AddShape(0, 1, declarationPart);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    statementPart := new RuleBox('statement-part');
    diagram.AddShape(0, 3, statementPart);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, declarationPart, east, noDir));
    diagram.AddConnector(new SyntaxArrow(declarationPart, statementPart, east, noDir));
    diagram.AddConnector(new SyntaxArrow(statementPart, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeDeclarationPartDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2, branch3, branch4: Branch;
    out: Out;
    routingPoint: RoutingPoint;
    constantDeclarationPart, typeDeclarationPart, variableDeclarationPart, subroutineDeclarationPart: RuleBox;
  begin    
    title := new DiagramTitle('declaration-part');
    diagram := new Diagram(title, 'declaration-part.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    branch2 := new Branch();
    diagram.AddShape(0, 1, branch2);
    constantDeclarationPart := new RuleBox('constant-declaration-part');
    diagram.AddShape(1, 2, constantDeclarationPart);
    typeDeclarationPart := new RuleBox('type-declaration-part');
    diagram.AddShape(2, 2, typeDeclarationPart);
    variableDeclarationPart := new RuleBox('variable-declaration-part');
    diagram.AddShape(3, 2, variableDeclarationPart);
    subroutineDeclarationPart := new RuleBox('subroutine-declaration-part');
    diagram.AddShape(4, 2, subroutineDeclarationPart);
    branch3 := new Branch();
    diagram.AddShape(0, 3, branch3);
    branch4 := new Branch();
    diagram.AddShape(0, 4, branch4);
    out := new Out();
    diagram.AddShape(0, 5, out);
    routingPoint := new RoutingPoint();
    diagram.AddShape(5, 2, routingPoint);
    diagram.AddConnector(new SyntaxArrow(title, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, constantDeclarationPart, south, east));
    diagram.AddConnector(new SyntaxArrow(constantDeclarationPart, branch3, east, north));
    diagram.AddConnector(new SyntaxArrow(branch2, typeDeclarationPart, south, east));
    diagram.AddConnector(new SyntaxArrow(typeDeclarationPart, branch3, east, north));
    diagram.AddConnector(new SyntaxArrow(branch2, variableDeclarationPart, south, east));
    diagram.AddConnector(new SyntaxArrow(variableDeclarationPart, branch3, east, north));
    diagram.AddConnector(new SyntaxArrow(branch2, subroutineDeclarationPart, south, east));
    diagram.AddConnector(new SyntaxArrow(subroutineDeclarationPart, branch3, east, north));
    diagram.AddConnector(new SyntaxLine(branch4, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch1, west, south));
    AddDiagram(diagram);
  end;

  procedure MakeStatementPartDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    compoundStatment: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('statement-part');
    diagram := new Diagram(title, 'statement-part.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    compoundStatment := new RuleBox('compound-statement');
    diagram.AddShape(0, 1, compoundStatment);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, compoundStatment, east, noDir));
    diagram.AddConnector(new SyntaxArrow(compoundStatment, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeStatementDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    simpleStatement: RuleBox;
    structuredStatement: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('statement');
    diagram := new Diagram(title, 'statement.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    simpleStatement := new RuleBox('simple-statement');
    diagram.AddShape(1, 1, simpleStatement);
    structuredStatement := new RuleBox('structured-statement');
    diagram.AddShape(2, 1, structuredStatement);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, simpleStatement, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, structuredStatement, south, east));
    diagram.AddConnector(new SyntaxArrow(simpleStatement, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(structuredStatement, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeSimpleStatementDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    assignmentStatement: RuleBox;
    procedureStatement: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('simple-statement');
    diagram := new Diagram(title, 'simple-statement.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    assignmentStatement := new RuleBox('assignment-statement');
    diagram.AddShape(0, 1, assignmentStatement);
    procedureStatement := new RuleBox('procedure-statement');
    diagram.AddShape(1, 1, procedureStatement);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, assignmentStatement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, procedureStatement, south, east));
    diagram.AddConnector(new SyntaxArrow(procedureStatement, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(assignmentStatement, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeAssignmentStatementDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4: Gap;
    expr1, expr2: RuleBox;
    assign: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('assignment-statement');
    diagram := new Diagram(title, 'assignment-statement.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    expr1 := new RuleBox('expression');
    diagram.AddShape(0, 1, expr1);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    assign := new Terminal(':=');
    diagram.AddShape(0, 3, assign);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    expr2 := new RuleBox('expression');
    diagram.AddShape(0, 5, expr2);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, expr1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expr1, assign, east, noDir));
    diagram.AddConnector(new SyntaxArrow(assign, expr2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expr2, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeProcedureStatementDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    procedureIdentifier: RuleBox;
    gap1: Gap;
    argumentList: RuleBox;
    expression: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('procedure-statement');
    diagram := new Diagram(title, 'procedure-statement.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    procedureIdentifier := new RuleBox('procedure-identifier');
    diagram.AddShape(0, 1, procedureIdentifier);
    gap1 := new Gap();
    diagram.AddShape(0, 2, gap1);
    argumentList := new RuleBox('argument-list');
    diagram.AddShape(0, 3, argumentList);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    out := new Out();
    diagram.AddShape(0, 5, out);
    expression := new RuleBox('expression');
    diagram.AddShape(1, 1, expression);
    diagram.AddConnector(new SyntaxArrow(title, procedureIdentifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, expression, south, east));
    diagram.AddConnector(new SyntaxArrow(expression, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(procedureIdentifier, argumentList, east, noDir));
    diagram.AddConnector(new SyntaxArrow(argumentList, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeProcedureIdentifierDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('procedure-identifier');
    diagram := new Diagram(title, 'procedure-identifier.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeStructuredStatementDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    compoundStatement: RuleBox;
    conditionalStatement: RuleBox;
    repetitiveStatement: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('structured-statement');
    diagram := new Diagram(title, 'structured-statement.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    compoundStatement := new RuleBox('compound-statement');
    diagram.AddShape(0, 1, compoundStatement);
    conditionalStatement := new RuleBox('conditional-statement');
    diagram.AddShape(1, 1, conditionalStatement);
    repetitiveStatement := new RuleBox('repetitive-statement');
    diagram.AddShape(2, 1, repetitiveStatement);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, compoundStatement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, conditionalStatement, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, repetitiveStatement, south, east));
    diagram.AddConnector(new SyntaxArrow(compoundStatement, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(conditionalStatement, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(repetitiveStatement, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeCompoundStatementDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    beginKeyword, endKeyword: Keyword;
    statement: RuleBox;
    branch1, branch2: Branch;
    semicolon: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('compound-statement');
    diagram := new Diagram(title, 'compound-statement.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    beginKeyword := new Keyword('begin');
    diagram.AddShape(0, 1, beginKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    statement := new RuleBox('statement');
    diagram.AddShape(0, 3, statement);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    semicolon := new Terminal(';');
    diagram.AddShape(1, 3, semicolon);
    endKeyword := new Keyword('end');
    diagram.AddShape(0, 5, endKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, beginKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(beginKeyword, statement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, semicolon, south, west));
    diagram.AddConnector(new SyntaxArrow(semicolon, branch1, west, north));
    diagram.AddConnector(new SyntaxArrow(statement, endKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(endKeyword, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeConditionalStatementDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    ifStatement: RuleBox;
    caseStatement: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('conditional-statement');
    diagram := new Diagram(title, 'conditional-statement.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    ifStatement := new RuleBox('if-statement');
    diagram.AddShape(0, 1, ifStatement);
    caseStatement := new RuleBox('case-statement');
    diagram.AddShape(1, 1, caseStatement);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, ifStatement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, caseStatement, south, east));
    diagram.AddConnector(new SyntaxArrow(caseStatement, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(ifStatement, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeIfStatementDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    ifKeyword, thenKeyword, elseKeyword: Keyword;
    expression: RuleBox;
    statement1, statement2: RuleBox;
    branch1, branch2: Branch;
    out: Out;
  begin
    title := new DiagramTitle('if-statement');
    diagram := new Diagram(title, 'if-statement.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    ifKeyword := new Keyword('if');
    diagram.AddShape(0, 1, ifKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 3, expression);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    thenKeyword := new Keyword('then');
    diagram.AddShape(0, 5, thenKeyword);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    statement1 := new RuleBox('statement');
    diagram.AddShape(0, 7, statement1);
    branch1 := new Branch();
    diagram.AddShape(0, 8, branch1);
    elseKeyword := new Keyword('else');
    diagram.AddShape(1, 9, elseKeyword);
    gap5 := new Gap();
    diagram.AddShape(1, 10, gap5);
    statement2 := new RuleBox('statement');
    diagram.AddShape(1, 11, statement2);
    branch2 := new Branch();
    diagram.AddShape(0, 12, branch2);
    out := new Out();
    diagram.AddShape(0, 13, out);
    diagram.AddConnector(new SyntaxArrow(title, ifKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(ifKeyword, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, thenKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(thenKeyword, statement1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(statement1, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, elseKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(elseKeyword, statement2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(statement2, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeCaseStatementDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    caseKeyword, ofKeyword, endKeyword: Keyword;
    expression, caseRule, elsePart: RuleBox;
    branch1, branch2, branch3, branch4, branch5, branch6, branch7: Branch;
    semicolon1, semicolon2: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('case-statement');
    diagram := new Diagram(title, 'case-statement.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    caseKeyword := new Keyword('case');
    diagram.AddShape(0, 1, caseKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 3, expression);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    ofKeyword := new Keyword('of');
    diagram.AddShape(0, 5, ofKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 6, branch1);
    caseRule := new RuleBox('case');
    diagram.AddShape(0, 7, caseRule);
    branch2 := new Branch();
    diagram.AddShape(0, 8, branch2);
    branch3 := new Branch();
    diagram.AddShape(0, 9, branch3);
    branch4 := new Branch();
    diagram.AddShape(0, 10, branch4);
    branch5 := new Branch();
    diagram.AddShape(0, 11, branch5);
    branch6 := new Branch();
    diagram.AddShape(0, 12, branch6);
    branch7 := new Branch();
    diagram.AddShape(0, 14, branch7);
    semicolon1 := new Terminal(';');
    diagram.AddShape(1, 7, semicolon1);
    elsePart := new RuleBox('else-part');
    diagram.AddShape(1, 10, elsePart);
    semicolon2 := new Terminal(';');
    diagram.AddShape(1, 13, semicolon2);
    endKeyword := new Keyword('end');
    diagram.AddShape(0, 15, endKeyword);
    gap5 := new Gap();
    diagram.AddShape(0, 16, gap5);
    out := new Out();
    diagram.AddShape(0, 17, out);
    diagram.AddConnector(new SyntaxArrow(title, caseKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(caseKeyword, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, ofKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(ofKeyword, caseRule, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, semicolon1, south, west));
    diagram.AddConnector(new SyntaxArrow(semicolon1, branch1, west, north));
    diagram.AddConnector(new SyntaxArrow(branch3, elsePart, south, east));
    diagram.AddConnector(new SyntaxArrow(elsePart, branch5, east, north));
    diagram.AddConnector(new SyntaxArrow(branch6, semicolon2, south, east));
    diagram.AddConnector(new SyntaxArrow(semicolon2, branch7, east, north));
    diagram.AddConnector(new SyntaxArrow(caseRule, endKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(endKeyword, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeCaseDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    gap1, gap2: Gap;
    constantRange, statement: RuleBox;
    comma, colon: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('case');
    diagram := new Diagram(title, 'case.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    constantRange := new RuleBox('constant-range');
    diagram.AddShape(0, 1, constantRange);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    comma := new Terminal(',');
    diagram.AddShape(1, 1, comma);
    colon := new Terminal(':');
    diagram.AddShape(0, 3, colon);
    gap1 := new Gap();
    diagram.AddShape(0, 4, gap1);
    statement := new RuleBox('statement');
    diagram.AddShape(0, 5, statement);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, constantRange, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, comma, south, west));
    diagram.AddConnector(new SyntaxArrow(comma, branch1, west, north));
    diagram.AddConnector(new SyntaxArrow(constantRange, colon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(colon, statement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(statement, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeConstantRangeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    constantExpression1, constantExpression2: RuleBox;
    branch1, branch2: Branch;
    dotdot: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('constant-range');
    diagram := new Diagram(title, 'constant-range.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    constantExpression1 := new RuleBox('constant-expression');
    diagram.AddShape(0, 1, constantExpression1);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    dotdot := new Terminal('..');
    diagram.AddShape(1, 3, dotdot);
    gap2 := new Gap();
    diagram.AddShape(1, 4, gap2);
    constantExpression2 := new RuleBox('constant-expression');
    diagram.AddShape(1, 5, constantExpression2);
    branch2 := new Branch();
    diagram.AddShape(0, 6, branch2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, constantExpression1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, dotdot, south, east));
    diagram.AddConnector(new SyntaxArrow(dotdot, constantExpression2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constantExpression2, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(constantExpression1, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeElsePartDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3: Gap;
    elseKeyword: Keyword;
    statement: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('else-part');
    diagram := new Diagram(title, 'else-part.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    elseKeyword := new Keyword('else');
    diagram.AddShape(0, 1, elseKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    statement := new RuleBox('statement');
    diagram.AddShape(0, 3, statement);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, elseKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(elseKeyword, statement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(statement, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeRepetitiveStatementDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    repeatStatement: RuleBox;
    whileStatement: RuleBox;
    forStatement: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('repetitive-statement');
    diagram := new Diagram(title, 'repetitive-statement.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    repeatStatement := new RuleBox('repeat-statement');
    diagram.AddShape(0, 1, repeatStatement);
    whileStatement := new RuleBox('while-statement');
    diagram.AddShape(1, 1, whileStatement);
    forStatement := new RuleBox('for-statement');
    diagram.AddShape(2, 1, forStatement);
    diagram.AddConnector(new SyntaxArrow(title, repeatStatement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, whileStatement, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, forStatement, south, east));
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(repeatStatement, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(whileStatement, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(forStatement, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeRepeatStatementDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3: Gap;
    branch1, branch2: Branch;
    repeatKeyword: Keyword;
    untilKeyword: Keyword;
    statement: RuleBox;
    semicolon: Terminal;
    expression: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('repeat-statement');
    diagram := new Diagram(title, 'repeat-statement.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    repeatKeyword := new Keyword('repeat');
    diagram.AddShape(0, 1, repeatKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    statement := new RuleBox('statement');
    diagram.AddShape(0, 3, statement);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    semicolon := new Terminal(';');
    diagram.AddShape(1, 3, semicolon);
    untilKeyword := new Keyword('until');
    diagram.AddShape(0, 5, untilKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 7, expression);
    gap3 := new Gap();
    diagram.AddShape(0, 8, gap3);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, repeatKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(repeatKeyword, statement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(statement, untilKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(untilKeyword, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, semicolon, south, west));
    diagram.AddConnector(new SyntaxArrow(semicolon, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeWhileStatementDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    whileKeyword: Keyword;
    expression: RuleBox;
    doKeyword: Keyword;
    statement: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('while-statement');
    diagram := new Diagram(title, 'while-statement.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    whileKeyword := new Keyword('while');
    diagram.AddShape(0, 1, whileKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 3, expression);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    doKeyword := new Keyword('do');
    diagram.AddShape(0, 5, doKeyword);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    statement := new RuleBox('statement');
    diagram.AddShape(0, 7, statement);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, whileKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(whileKeyword, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, doKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(doKeyword, statement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(statement, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeForStatementDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5, gap6, gap7, gap8, gap9: Gap;
    forKeyword: Keyword;
    controlVariable: RuleBox;
    assign: Terminal;
    initialValue: RuleBox;
    direction: RuleBox;
    finalValue: RuleBox;
    doKeyword: Keyword;
    statement: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('for-statement');
    diagram := new Diagram(title, 'for-statement.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    forKeyword := new Keyword('for');
    diagram.AddShape(0, 1, forKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    controlVariable := new RuleBox('control-variable');
    diagram.AddShape(0, 3, controlVariable);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    assign := new Terminal(':=');
    diagram.AddShape(0, 5, assign);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    initialValue := new RuleBox('initial-value');
    diagram.AddShape(0, 7, initialValue);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    direction := new RuleBox('direction');
    diagram.AddShape(0, 9, direction);
    gap6 := new Gap();
    diagram.AddShape(0, 10, gap6);
    finalValue := new RuleBox('final-value');
    diagram.AddShape(0, 11, finalValue);
    gap7 := new Gap();
    diagram.AddShape(0, 12, gap7);
    doKeyword := new Keyword('do');
    diagram.AddShape(0, 13, doKeyword);
    gap8 := new Gap();
    diagram.AddShape(0, 14, gap8);
    statement := new RuleBox('statement');
    diagram.AddShape(0, 15, statement);
    gap9 := new Gap();
    diagram.AddShape(0, 16, gap9);
    out := new Out();
    diagram.AddShape(0, 17, out);
    diagram.AddConnector(new SyntaxArrow(title, forKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(forKeyword, controlVariable, east, noDir));
    diagram.AddConnector(new SyntaxArrow(controlVariable, assign, east, noDir));
    diagram.AddConnector(new SyntaxArrow(assign, initialValue, east, noDir));
    diagram.AddConnector(new SyntaxArrow(initialValue, direction, east, noDir));
    diagram.AddConnector(new SyntaxArrow(direction, finalValue, east, noDir));
    diagram.AddConnector(new SyntaxArrow(finalValue, doKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(doKeyword, statement, east, noDir));
    diagram.AddConnector(new SyntaxArrow(statement, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeControlVariableDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    variableIdentifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('control-variable');
    diagram := new Diagram(title, 'control-variable.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    variableIdentifier := new RuleBox('variable-identifier');
    diagram.AddShape(0, 1, variableIdentifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, variableIdentifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(variableIdentifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeVariableIdentifierDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('variable-identifier');
    diagram := new Diagram(title, 'variable-identifier.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeInitialValueDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    expression: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('initial-value');
    diagram := new Diagram(title, 'initial-value.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 1, expression);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeFinalValueDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    expression: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('final-value');
    diagram := new Diagram(title, 'final-value.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 1, expression);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeDirectionDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    toKeyword, downtoKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('direction');
    diagram := new Diagram(title, 'direction.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    toKeyword := new Keyword('to');
    diagram.AddShape(0, 1, toKeyword);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    downtoKeyword := new Keyword('downto');
    diagram.AddShape(1, 1, downtoKeyword);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, toKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(toKeyword, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, downtoKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(downtoKeyword, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeExpressionDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;  
    gap1, gap2: Gap;
    simpleExpression1, simpleExpression2: RuleBox;
    relationalOperator: RuleBox;
    branch1, branch2: Branch;
    out: Out;
  begin
    title := new DiagramTitle('expression');
    diagram := new Diagram(title, 'expression.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    simpleExpression1 := new RuleBox('simple-expression');
    diagram.AddShape(0, 1, simpleExpression1);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    branch2 := new Branch();
    relationalOperator := new RuleBox('relational-operator');
    diagram.AddShape(1, 3, relationalOperator);
    gap2 := new Gap();
    diagram.AddShape(1, 4, gap2);
    simpleExpression2 := new RuleBox('simple-expression');
    diagram.AddShape(1, 5, simpleExpression2);
    diagram.AddShape(0, 6, branch2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, simpleExpression1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(simpleExpression1, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, relationalOperator, south, east));
    diagram.AddConnector(new SyntaxArrow(relationalOperator, simpleExpression2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(simpleExpression2, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeRelationalOperatorDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    equal, notEqual, less, lessEqual, greater, greaterEqual: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('relational-operator');
    diagram := new Diagram(title, 'relational-operator.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    equal := new Terminal('=');
    diagram.AddShape(0, 1, equal);
    notEqual := new Terminal('<>');
    diagram.AddShape(1, 1, notEqual);
    less := new Terminal('<');
    diagram.AddShape(2, 1, less);
    greater := new Terminal('>');
    diagram.AddShape(3, 1, greater);
    lessEqual := new Terminal('<=');
    diagram.AddShape(4, 1, lessEqual);
    greaterEqual := new Terminal('>=');
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddShape(5, 1, greaterEqual);
    diagram.AddConnector(new SyntaxArrow(title, equal, east, noDir));
    diagram.AddConnector(new SyntaxArrow(equal, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, notEqual, south, east));
    diagram.AddConnector(new SyntaxArrow(notEqual, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(branch1, less, south, east));
    diagram.AddConnector(new SyntaxArrow(less, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(branch1, greater, south, east));
    diagram.AddConnector(new SyntaxArrow(greater, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(branch1, lessEqual, south, east));
    diagram.AddConnector(new SyntaxArrow(lessEqual, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(branch1, greaterEqual, south, east));
    diagram.AddConnector(new SyntaxArrow(greaterEqual, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeConstantExpressionDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    expression: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('constant-expression');
    diagram := new Diagram(title, 'constant-expression.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 1, expression);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeSimpleExpressionDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    term: RuleBox;
    weakOperator: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('simple-expression');
    diagram := new Diagram(title, 'simple-expression.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    term := new RuleBox('term');
    diagram.AddShape(0, 1, term);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    weakOperator := new RuleBox('weak-operator');
    diagram.AddShape(1, 1, weakOperator);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, term, east, noDir));
    diagram.AddConnector(new SyntaxArrow(term, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, weakOperator, south, west));
    diagram.AddConnector(new SyntaxArrow(weakOperator, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeWeakOperatorDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1: Branch;
    plus, minus: Terminal;
    orKeyword: Keyword;
    xorKeyword: Keyword;
    branch2: Branch;
    out: Out;
  begin
    title := new DiagramTitle('weak-operator');
    diagram := new Diagram(title, 'weak-operator.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    plus := new Terminal('+');
    diagram.AddShape(0, 1, plus);
    minus := new Terminal('-');
    diagram.AddShape(1, 1, minus);
    orKeyword := new Keyword('or');
    diagram.AddShape(2, 1, orKeyword);
    xorKeyword := new Keyword('xor');
    diagram.AddShape(3, 1, xorKeyword);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, plus, east, noDir));
    diagram.AddConnector(new SyntaxArrow(plus, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, minus, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, orKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, xorKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(minus, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(orKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(xorKeyword, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeTermDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    factor: RuleBox;
    strongOperator: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('term');
    diagram := new Diagram(title, 'term.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    factor := new RuleBox('factor');
    diagram.AddShape(0, 2, factor);
    branch2 := new Branch();
    diagram.AddShape(0, 3, branch2);
    strongOperator := new RuleBox('strong-operator');
    out := new Out();
    diagram.AddShape(0, 4, out);
    diagram.AddShape(1, 2, strongOperator);
    diagram.AddConnector(new SyntaxArrow(title, factor, east, noDir));
    diagram.AddConnector(new SyntaxArrow(factor, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, strongOperator, south, west));
    diagram.AddConnector(new SyntaxArrow(strongOperator, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeStrongOperatorDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    star, slash: Terminal;
    divKeyword, modKeyword, andKeyword, shlKeyword, shrKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('strong-operator');
    diagram := new Diagram(title, 'strong-operator.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    star := new Terminal('*');
    diagram.AddShape(0, 1, star);
    slash := new Terminal('/');
    diagram.AddShape(1, 1, slash);
    divKeyword := new Keyword('div');
    diagram.AddShape(2, 1, divKeyword);
    modKeyword := new Keyword('mod');
    diagram.AddShape(3, 1, modKeyword);
    andKeyword := new Keyword('and');
    diagram.AddShape(4, 1, andKeyword);
    shlKeyword := new Keyword('shl');
    diagram.AddShape(5, 1, shlKeyword);
    shrKeyword := new Keyword('shr');
    diagram.AddShape(6, 1, shrKeyword);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, star, east, noDir));
    diagram.AddConnector(new SyntaxArrow(star, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, slash, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, divKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, modKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, andKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, shlKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, shrKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(slash, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(divKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(modKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(andKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(shlKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(shrKeyword, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeFactorDiagram();
  var
    title:  DiagramTitle;
    diagram: Diagram;
    primary: RuleBox;
    gap1: Gap;
    branch1, branch2: Branch;
    out: Out;
    qualifier, argumentList: RuleBox;
  begin
    title := new DiagramTitle('factor');
    diagram := new Diagram(title, 'factor.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    primary := new RuleBox('primary');
    diagram.AddShape(0, 1, primary);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    qualifier := new RuleBox('qualifier');
    diagram.AddShape(1, 3, qualifier);
    argumentList := new RuleBox('argument-list');
    diagram.AddShape(2, 3, argumentList);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    out := new Out();
    diagram.AddShape(0, 6, out);
    diagram.AddConnector(new SyntaxArrow(title, primary, east, noDir));
    diagram.AddConnector(new SyntaxArrow(primary, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, qualifier, south, west));
    diagram.AddConnector(new SyntaxArrow(branch2, argumentList, south, west));
    diagram.AddConnector(new SyntaxArrow(qualifier, branch1, west, north));
    diagram.AddConnector(new SyntaxArrow(argumentList, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakePrimaryDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    out: Out;
    variableReference: RuleBox;
    unsignedConstant: RuleBox;
    lparen, rparen: Terminal;
    expression: RuleBox;
    notKeyword: Keyword;
    factor1, factor2: RuleBox;
    sign: RuleBox;
    functionIdentifier: RuleBox;
    valueTypecast: RuleBox;
    newExpression: RuleBox;
    thisKeyword, baseKeyword: Keyword;
    fieldIdentifier, methodIdentifier: RuleBox;
  begin
    title := new DiagramTitle('primary');
    diagram := new Diagram(title, 'primary.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    variableReference := new RuleBox('variable-reference');
    diagram.AddShape(0, 1, variableReference);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    out := new Out();
    diagram.AddShape(0, 5, out);
    unsignedConstant := new RuleBox('unsigned-constant');
    diagram.AddShape(1, 1, unsignedConstant);
    lparen := new Terminal('(');
    diagram.AddShape(2, 1, lparen);
    expression := new RuleBox('expression');
    diagram.AddShape(2, 2, expression);
    rparen := new Terminal(')');
    diagram.AddShape(2, 3, rparen);
    notKeyword := new Keyword('not');
    diagram.AddShape(3, 1, notKeyword);
    factor1 := new RuleBox('factor');
    diagram.AddShape(3, 2, factor1);
    sign := new RuleBox('sign');
    diagram.AddShape(4, 1, sign);
    factor2 := new RuleBox('factor');
    diagram.AddShape(4, 2, factor2);
    functionIdentifier := new RuleBox('function-identifier');
    diagram.AddShape(5, 1, functionIdentifier);
    valueTypecast := new RuleBox('value-typecast');
    diagram.AddShape(6, 1, valueTypecast);
    newExpression := new RuleBox('new-expression');
    diagram.AddShape(7, 1, newExpression);
    thisKeyword := new Keyword('this');
    diagram.AddShape(8, 1, thisKeyword);
    baseKeyword := new Keyword('base');
    diagram.AddShape(9, 1, baseKeyword);
    fieldIdentifier := new RuleBox('field-identifier');
    diagram.AddShape(10, 1, fieldIdentifier);
    methodIdentifier := new RuleBox('method-identifier');
    diagram.AddShape(11, 1, methodIdentifier);
    diagram.AddConnector(new SyntaxArrow(title, variableReference, east, noDir));
    diagram.AddConnector(new SyntaxArrow(variableReference, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, unsignedConstant, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, lparen, south, east));
    diagram.AddConnector(new SyntaxArrow(lparen, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, notKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(notKeyword, factor1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, sign, south, east));
    diagram.AddConnector(new SyntaxArrow(sign, factor2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, functionIdentifier, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, valueTypecast, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, newExpression, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, thisKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, baseKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, fieldIdentifier, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, methodIdentifier, south, east));
    diagram.AddConnector(new SyntaxArrow(unsignedConstant, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(rparen, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(factor1, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(factor2, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(functionIdentifier, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(valueTypecast, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(newExpression, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(thisKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(baseKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(fieldIdentifier, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(methodIdentifier, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeVariableReferenceDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    variableIdentifier: RuleBox;
    variableTypecast: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('variable-reference');
    diagram := new Diagram(title, 'variable-reference.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    variableIdentifier := new RuleBox('variable-identifier');
    diagram.AddShape(0, 1, variableIdentifier);
    variableTypecast := new RuleBox('variable-typecast');
    diagram.AddShape(1, 1, variableTypecast);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, variableIdentifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(variableIdentifier, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, variableTypecast, south, east));
    diagram.AddConnector(new SyntaxArrow(variableTypecast, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeVariableTypecastDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    typename: RuleBox;
    lparen, rparen: Terminal;
    variableReference: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('variable-typecast');
    diagram := new Diagram(title, 'variable-typecast.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    typename := new RuleBox('type-name');
    diagram.AddShape(0, 1, typename);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    lparen := new Terminal('(');
    diagram.AddShape(0, 3, lparen);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    variableReference := new RuleBox('variable-reference');
    diagram.AddShape(0, 5, variableReference);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    rparen := new Terminal(')');
    diagram.AddShape(0, 7, rparen);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, typename, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typename, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, variableReference, east, noDir));
    diagram.AddConnector(new SyntaxArrow(variableReference, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rparen, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeTypeNameDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    typeIdentifier: RuleBox;
    integerKeyword, realKeyword, charKeyword, booleanKeyword, stringKeyword, pointerKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('type-name');
    diagram := new Diagram(title, 'type-name.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    typeIdentifier := new RuleBox('type-identifier');
    diagram.AddShape(0, 1, typeIdentifier);
    integerKeyword := new Keyword('integer');
    diagram.AddShape(1, 1, integerKeyword);
    realKeyword := new Keyword('real');
    diagram.AddShape(2, 1, realKeyword);
    charKeyword := new Keyword('char');
    diagram.AddShape(3, 1, charKeyword);
    booleanKeyword := new Keyword('boolean');
    diagram.AddShape(4, 1, booleanKeyword);
    stringKeyword := new Keyword('string');
    diagram.AddShape(5, 1, stringKeyword);
    pointerKeyword := new Keyword('pointer');
    diagram.AddShape(6, 1, pointerKeyword);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, typeIdentifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeIdentifier, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, integerKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, realKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, charKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, booleanKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, stringKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, pointerKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(integerKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(realKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(charKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(booleanKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(stringKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(pointerKeyword, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeTypeIdentifierDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('type-identifier');
    diagram := new Diagram(title, 'type-identifier.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeUnsignedConstantDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    unsignedNumber: RuleBox;
    characterString: RuleBox;
    constantIdentifier: RuleBox;
    trueKeyword, falseKeyword, nilKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('unsigned-constant');
    diagram := new Diagram(title, 'unsigned-constant.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    unsignedNumber := new RuleBox('unsigned-number');
    diagram.AddShape(0, 1, unsignedNumber);
    characterString := new RuleBox('character-string');
    diagram.AddShape(1, 1, characterString);
    constantIdentifier := new RuleBox('constant-identifier');
    diagram.AddShape(2, 1, constantIdentifier);
    trueKeyword := new Keyword('true');
    diagram.AddShape(3, 1, trueKeyword);
    falseKeyword := new Keyword('false');
    diagram.AddShape(4, 1, falseKeyword);
    nilKeyword := new Keyword('nil');
    diagram.AddShape(5, 1, nilKeyword);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, unsignedNumber, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, characterString, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, constantIdentifier, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, trueKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, falseKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, nilKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(unsignedNumber, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(characterString, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(constantIdentifier, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(trueKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(falseKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(nilKeyword, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeCharacterStringDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2, branch3, branch4: Branch;
    quotedString, controlString: RuleBox;
    routingPoint: RoutingPoint;
    out: Out;
  begin
    title := new DiagramTitle('character-string');
    diagram := new Diagram(title, 'character-string.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    branch2 := new Branch();
    diagram.AddShape(0, 1, branch2);
    quotedString := new RuleBox('quoted-string');
    diagram.AddShape(0, 2, quotedString);
    controlString := new RuleBox('control-string');
    diagram.AddShape(1, 2, controlString);
    branch3 := new Branch();
    diagram.AddShape(0, 3, branch3);
    routingPoint := new RoutingPoint();
    diagram.AddShape(2, 2, routingPoint);
    branch4 := new Branch();
    diagram.AddShape(0, 4, branch4);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, quotedString, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, controlString, south, east));
    diagram.AddConnector(new SyntaxArrow(quotedString, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(controlString, branch3, east, north));
    diagram.AddConnector(new SyntaxLine(branch4, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeQuotedStringDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    singleQuote1, singleQuote2: Terminal;
    branch1, branch2: Branch;
    stringCharacter: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('quoted-string');
    diagram := new Diagram(title, 'quoted-string.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    singleQuote1 := new Terminal('''');
    diagram.AddShape(0, 1, singleQuote1);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    stringCharacter := new RuleBox('string-character');
    diagram.AddShape(1, 3, stringCharacter);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    singleQuote2 := new Terminal('''');
    diagram.AddShape(0, 5, singleQuote2);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, singleQuote1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(singleQuote1, singleQuote2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, stringCharacter, south, west));
    diagram.AddConnector(new SyntaxArrow(stringCharacter, branch1, west, north));
    diagram.AddConnector(new SyntaxArrow(singleQuote2, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeStringCharacterDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    charRule: RuleBox;
    quote1, quote2: Terminal;
    gap1: Gap;
    out: Out;
  begin
    title := new DiagramTitle('string-character');
    diagram := new Diagram(title, 'string-character.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    charRule := new RuleBox('any character except CR, NL or ''');
    diagram.AddShape(0, 1, charRule);
    quote1 := new Terminal('''');
    diagram.AddShape(1, 1, quote1);
    gap1 := new Gap();
    diagram.AddShape(1, 2, gap1);
    quote2 := new Terminal('''');
    diagram.AddShape(1, 3, quote2);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, charRule, east, noDir));
    diagram.AddConnector(new SyntaxArrow(charRule, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, quote1, south, east));
    diagram.AddConnector(new SyntaxArrow(quote1, quote2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(quote2, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeControlStringDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3: Gap;
    hash: Terminal;
    unsignedInteger: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('control-string');
    diagram := new Diagram(title, 'control-string.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    hash := new Terminal('#');
    diagram.AddShape(0, 1, hash);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    unsignedInteger := new RuleBox('unsigned-integer');
    diagram.AddShape(0, 3, unsignedInteger);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, hash, east, noDir));
    diagram.AddConnector(new SyntaxArrow(hash, unsignedInteger, east, noDir));
    diagram.AddConnector(new SyntaxArrow(unsignedInteger, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeUnsignedNumberDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    unsignedInteger, unsignedReal: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('unsigned-number');
    diagram := new Diagram(title, 'unsigned-number.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    unsignedInteger := new RuleBox('unsigned-integer');
    diagram.AddShape(0, 1, unsignedInteger);
    unsignedReal := new RuleBox('unsigned-real');
    diagram.AddShape(1, 1, unsignedReal);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, unsignedInteger, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, unsignedReal, south, east));
    diagram.AddConnector(new SyntaxArrow(unsignedInteger, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(unsignedReal, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeUnsignedIntegerDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    digitSequence: RuleBox;
    dollar: Terminal;
    hexDigitSequence: RuleBox;
    gap1: Gap;
    out: Out;
  begin
    title := new DiagramTitle('unsigned-integer');
    diagram := new Diagram(title, 'unsigned-integer.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    digitSequence := new RuleBox('digit-sequence');
    diagram.AddShape(0, 1, digitSequence);
    dollar := new Terminal('$');
    diagram.AddShape(1, 1, dollar);
    gap1 := new Gap();
    diagram.AddShape(1, 2, gap1);
    hexDigitSequence := new RuleBox('hex-digit-sequence');
    diagram.AddShape(1, 3, hexDigitSequence);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, digitSequence, east, noDir));
    diagram.AddConnector(new SyntaxArrow(digitSequence, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, dollar, south, east));
    diagram.AddConnector(new SyntaxArrow(dollar, hexDigitSequence, east, noDir));
    diagram.AddConnector(new SyntaxArrow(hexDigitSequence, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeUnsignedRealDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    digitSequence1, digitSequence2: RuleBox;
    gap1, gap2: Gap;
    branch1, branch2, branch3: Branch;
    dot: Terminal;
    scaleFactor: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('unsigned-real');
    diagram := new Diagram(title, 'unsigned-real.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    digitSequence1 := new RuleBox('digit-sequence');
    diagram.AddShape(0, 1, digitSequence1);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    dot := new Terminal('.');
    diagram.AddShape(0, 3, dot);
    gap2 := new Gap();
    diagram.AddShape(0, 4, gap2);
    digitSequence2 := new RuleBox('digit-sequence');
    diagram.AddShape(0, 5, digitSequence2);
    branch2 := new Branch();
    diagram.AddShape(0, 6, branch2);
    scaleFactor := new RuleBox('scale-factor');
    diagram.AddShape(1, 7, scaleFactor);
    branch3 := new Branch();
    diagram.AddShape(0, 8, branch3);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, digitSequence1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(digitSequence1, dot, east, noDir));
    diagram.AddConnector(new SyntaxArrow(dot, digitSequence2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(digitSequence2, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, scaleFactor, south, east));
    diagram.AddConnector(new SyntaxArrow(branch2, scaleFactor, south, east));
    diagram.AddConnector(new SyntaxArrow(scaleFactor, branch3, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeScaleFactorDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2, branch3, branch4: Branch;
    locaseE, uppercaseE: Terminal;
    sign: RuleBox;
    digitSequence: RuleBox;
    gap1: Gap;
    out: Out;
  begin
    title := new DiagramTitle('scale-factor');
    diagram := new Diagram(title, 'scale-factor.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    locaseE := new Terminal('e');
    diagram.AddShape(0, 1, locaseE);
    uppercaseE := new Terminal('E');
    diagram.AddShape(1, 1, uppercaseE);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    branch3 := new Branch();
    diagram.AddShape(0, 3, branch3);
    sign := new RuleBox('sign');
    diagram.AddShape(1, 4, sign);
    branch4 := new Branch();
    diagram.AddShape(0, 5, branch4);
    digitSequence := new RuleBox('digit-sequence');
    diagram.AddShape(0, 6, digitSequence);
    gap1 := new Gap();
    diagram.AddShape(0, 7, gap1);
    out := new Out();
    diagram.AddShape(0, 8, out);
    diagram.AddConnector(new SyntaxArrow(title, locaseE, east, noDir));
    diagram.AddConnector(new SyntaxArrow(locaseE, digitSequence, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, uppercaseE, south, east));
    diagram.AddConnector(new SyntaxArrow(uppercaseE, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(branch3, sign, south, east));
    diagram.AddConnector(new SyntaxArrow(sign, branch4, east, north));
    diagram.AddConnector(new SyntaxArrow(digitSequence, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeConstantIdentifierDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('constant-identifier');
    diagram := new Diagram(title, 'constant-identifier.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeSignDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    plus, minus: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('sign');
    diagram := new Diagram(title, 'sign.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    plus := new Terminal('+');
    diagram.AddShape(0, 1, plus);
    minus := new Terminal('-');
    diagram.AddShape(1, 1, minus);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, plus, east, noDir));
    diagram.AddConnector(new SyntaxArrow(plus, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, minus, south, east));
    diagram.AddConnector(new SyntaxArrow(minus, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeFunctionIdentifierDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('function-identifier');
    diagram := new Diagram(title, 'function-identifier.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeValueTypecastDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    typeName: RuleBox;
    lparen, rparen: Terminal;
    expression: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('value-typecast');
    diagram := new Diagram(title, 'value-typecast.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    typeName := new RuleBox('type-name');
    diagram.AddShape(0, 1, typeName);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    lparen := new Terminal('(');
    diagram.AddShape(0, 3, lparen);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 5, expression);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    rparen := new Terminal(')');
    diagram.AddShape(0, 7, rparen);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    out := new Out();
    diagram.AddShape(0, 8, out);
    diagram.AddConnector(new SyntaxArrow(title, typeName, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeName, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rparen, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeNewExpressionDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4: Gap;
    newKeyword: Keyword;
    typeName: RuleBox;
    branch1, branch2: Branch;
    lbracket, rbracket: Terminal;
    expression: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('new-expression');
    diagram := new Diagram(title, 'new-expression.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    newKeyword := new Keyword('new');
    diagram.AddShape(0, 1, newKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    typeName := new RuleBox('type-name');
    diagram.AddShape(0, 3, typeName);
    branch1 := new Branch();
    diagram.AddShape(0, 4, branch1);
    lbracket := new Terminal('[');
    diagram.AddShape(1, 5, lbracket);
    gap3 := new Gap();
    diagram.AddShape(1, 6, gap3);
    expression := new RuleBox('expression');
    diagram.AddShape(1, 7, expression);
    gap4 := new Gap();
    diagram.AddShape(1, 8, gap4);
    rbracket := new Terminal(']');
    diagram.AddShape(1, 9, rbracket);
    branch2 := new Branch();
    diagram.AddShape(0, 10, branch2);
    out := new Out();
    diagram.AddShape(0, 11, out);
    diagram.AddConnector(new SyntaxArrow(title, newKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(newKeyword, typeName, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeName, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, lbracket, south, east));
    diagram.AddConnector(new SyntaxArrow(lbracket, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, rbracket, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rbracket, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeFieldIdentifierDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('field-identifier');
    diagram := new Diagram(title, 'field-identifier.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeMethodIdentifierDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('method-identifier');
    diagram := new Diagram(title, 'method-identifier.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeQualifierDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    index: RuleBox;
    fieldDesignator: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('qualifier');
    diagram := new Diagram(title, 'qualifier.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    index := new RuleBox('index');
    diagram.AddShape(0, 1, index);
    fieldDesignator := new RuleBox('field-designator');
    diagram.AddShape(1, 1, fieldDesignator);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, index, east, noDir));
    diagram.AddConnector(new SyntaxArrow(index, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, fieldDesignator, south, east));
    diagram.AddConnector(new SyntaxArrow(fieldDesignator, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeIndexDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4: Gap;
    lbracket, rbracket: Terminal;
    expression: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('index');
    diagram := new Diagram(title, 'index.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    lbracket := new Terminal('[');
    diagram.AddShape(0, 1, lbracket);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 3, expression);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    rbracket := new Terminal(']');
    diagram.AddShape(0, 5, rbracket);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, lbracket, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lbracket, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, rbracket, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rbracket, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeFieldDesignatorDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    dot: Terminal;
    gap1, gap2, gap3: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('field-designator');
    diagram := new Diagram(title, 'field-designator.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    dot := new Terminal('.');
    diagram.AddShape(0, 1, dot);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 3, identifier);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, dot, east, noDir));
    diagram.AddConnector(new SyntaxArrow(dot, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeConstantDeclarationPartDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    gap1: Gap;
    constKeyword: Keyword;
    branch1, branch2: Branch;
    constantDeclaration: RuleBox;
    routingPoint: RoutingPoint;
    out: Out;
  begin
    title := new DiagramTitle('constant-declaration-part');
    diagram := new Diagram(title, 'constant-declaration-part.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    constKeyword := new Keyword('const');
    diagram.AddShape(0, 1, constKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    constantDeclaration := new RuleBox('constant-declaration');
    diagram.AddShape(0, 3, constantDeclaration);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    out := new Out();
    diagram.AddShape(0, 5, out);
    routingPoint := new RoutingPoint();
    diagram.AddShape(1, 3, routingPoint);
    diagram.AddConnector(new SyntaxArrow(title, constKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constKeyword, constantDeclaration, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constantDeclaration, out, east, noDir));
    diagram.AddConnector(new SyntaxLine(branch2, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeConstantDeclarationDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5, gap6, gap7: Gap;
    identifier: RuleBox;
    colon: Terminal;
    typeRule, constant: RuleBox;
    equal, semicolon: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('constant-declaration');
    diagram := new Diagram(title, 'constant-declaration.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    colon := new Terminal(':');
    diagram.AddShape(0, 3, colon);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    typeRule := new RuleBox('type');
    diagram.AddShape(0, 5, typeRule);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    equal := new Terminal('=');
    diagram.AddShape(0, 7, equal);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    constant := new RuleBox('constant');
    diagram.AddShape(0, 9, constant);
    gap6 := new Gap();
    diagram.AddShape(0, 10, gap6);
    semicolon := new Terminal(';');
    diagram.AddShape(0, 11, semicolon);
    gap7 := new Gap();
    diagram.AddShape(0, 12, gap7);
    out := new Out();
    diagram.AddShape(0, 13, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, colon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(colon, typeRule, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeRule, equal, east, noDir));
    diagram.AddConnector(new SyntaxArrow(equal, constant, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constant, semicolon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeConstantDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    constantExpression: RuleBox;
    arrayConstant: RuleBox;
    objectConstant: RuleBox;
    branch1, branch2: Branch;
    out: Out;
  begin
    title := new DiagramTitle('constant');
    diagram := new Diagram(title, 'constant.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    constantExpression := new RuleBox('constant-expression');
    diagram.AddShape(0, 1, constantExpression);
    arrayConstant := new RuleBox('array-constant');
    diagram.AddShape(1, 1, arrayConstant);
    objectConstant := new RuleBox('object-constant');
    diagram.AddShape(2, 1, objectConstant);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, constantExpression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constantExpression, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, arrayConstant, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, objectConstant, south, east));
    diagram.AddConnector(new SyntaxArrow(arrayConstant, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(objectConstant, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeArrayConstantDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    lbracket, rbracket, comma: Terminal;
    branch1, branch2: Branch;
    constant: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('array-constant');
    diagram := new Diagram(title, 'array-constant.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    lbracket := new Terminal('[');
    diagram.AddShape(0, 1, lbracket);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    constant := new RuleBox('constant');
    diagram.AddShape(0, 3, constant);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    rbracket := new Terminal(']');
    diagram.AddShape(0, 5, rbracket);
    comma := new Terminal(',');
    diagram.AddShape(1, 3, comma);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, lbracket, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lbracket, constant, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constant, rbracket, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rbracket, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, comma, south, west));
    diagram.AddConnector(new SyntaxArrow(comma, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeObjectConstantDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3: Gap;
    out: Out;
    lparen, rparen, colon: Terminal;
    fieldName, constant: RuleBox;
    branch1, branch2: Branch;
  begin
    title := new DiagramTitle('object-constant');
    diagram := new Diagram(title, 'object-constant.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    lparen := new Terminal('(');
    diagram.AddShape(0, 1, lparen);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    fieldName := new RuleBox('field-name');
    diagram.AddShape(0, 3, fieldName);
    branch2 := new Branch();
    diagram.AddShape(0, 6, branch2);
    colon := new Terminal(':');
    diagram.AddShape(1, 5, colon);
    gap3 := new Gap();
    diagram.AddShape(1, 4, gap3);
    constant := new RuleBox('constant');
    diagram.AddShape(1, 3, constant);
    rparen := new Terminal(')');
    diagram.AddShape(0, 7, rparen);
    gap2 := new Gap();
    diagram.AddShape(0, 8, gap2);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, fieldName, east, noDir));
    diagram.AddConnector(new SyntaxArrow(fieldName, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rparen, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, colon, south, west));
    diagram.AddConnector(new SyntaxArrow(colon, constant, west, noDir));
    diagram.AddConnector(new SyntaxArrow(constant, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeFieldNameDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('field-name');
    diagram := new Diagram(title, 'field-name.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeTypeDeclarationPartDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1: Gap;
    typeKeyword: Keyword;
    branch1, branch2: Branch;
    typeDeclaration: RuleBox;
    routingPoint: RoutingPoint;
    out: Out;
  begin
    title := new DiagramTitle('type-declaration-part');
    diagram := new Diagram(title, 'type-declaration-part.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    typeKeyword := new Keyword('type');
    diagram.AddShape(0, 1, typeKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    typeDeclaration := new RuleBox('type-declaration');
    diagram.AddShape(0, 3, typeDeclaration);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    out := new Out();
    diagram.AddShape(0, 5, out);
    routingPoint := new RoutingPoint();
    diagram.AddShape(1, 3, routingPoint);
    diagram.AddConnector(new SyntaxArrow(title, typeKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeKeyword, typeDeclaration, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeDeclaration, out, east, noDir));
    diagram.AddConnector(new SyntaxLine(branch2, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeTypeDeclarationDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    identifier: RuleBox;
    equal, semicolon: Terminal;
    typeRule: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('type-declaration');
    diagram := new Diagram(title, 'type-declaration.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    equal := new Terminal('=');
    diagram.AddShape(0, 3, equal);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    typeRule := new RuleBox('type');
    diagram.AddShape(0, 5, typeRule);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    semicolon := new Terminal(';');
    diagram.AddShape(0, 6, semicolon);
    gap5 := new Gap();
    diagram.AddShape(0, 7, gap5);
    out := new Out();
    diagram.AddShape(0, 8, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, equal, east, noDir));
    diagram.AddConnector(new SyntaxArrow(equal, typeRule, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeRule, semicolon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    simpleType, stringType, pointerType, objectType, arrayType, typeIdentifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('type');
    diagram := new Diagram(title, 'type.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    simpleType := new RuleBox('simple-type');
    diagram.AddShape(0, 1, simpleType);
    stringType := new RuleBox('string-type');
    diagram.AddShape(1, 1, stringType);
    pointerType := new RuleBox('pointer-type');
    diagram.AddShape(2, 1, pointerType);
    objectType := new RuleBox('object-type');
    diagram.AddShape(3, 1, objectType);
    arrayType := new RuleBox('array-type');
    diagram.AddShape(4, 1, arrayType);
    typeIdentifier := new RuleBox('type-identifier');
    diagram.AddShape(5, 1, typeIdentifier);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, simpleType, east, noDir));
    diagram.AddConnector(new SyntaxArrow(simpleType, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, stringType, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, pointerType, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, objectType, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, arrayType, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, typeIdentifier, south, east));
    diagram.AddConnector(new SyntaxArrow(stringType, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(pointerType, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(objectType, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(arrayType, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(typeIdentifier, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeSimpleTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    ordinalType, realType: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('simple-type');
    diagram := new Diagram(title, 'simple-type.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    ordinalType := new RuleBox('ordinal-type');
    diagram.AddShape(0, 1, ordinalType);
    realType := new RuleBox('real-type');
    diagram.AddShape(1, 1, realType);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, ordinalType, east, noDir));
    diagram.AddConnector(new SyntaxArrow(ordinalType, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, realType, south, east));
    diagram.AddConnector(new SyntaxArrow(realType, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeOrdinalTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    subrangeType, enumeratedType, ordinalTypeName: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('ordinal-type');
    diagram := new Diagram(title, 'ordinal-type.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    subrangeType := new RuleBox('subrange-type');
    diagram.AddShape(0, 1, subrangeType);
    enumeratedType := new RuleBox('enumerated-type');
    diagram.AddShape(1, 1, enumeratedType);
    ordinalTypeName := new RuleBox('ordinal-type-name');
    diagram.AddShape(2, 1, ordinalTypeName);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, subrangeType, east, noDir));
    diagram.AddConnector(new SyntaxArrow(subrangeType, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, enumeratedType, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, ordinalTypeName, south, east));
    diagram.AddConnector(new SyntaxArrow(enumeratedType, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(ordinalTypeName, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeSubrangeTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4: Gap;
    constantExpression1, constantExpression2: RuleBox;
    dotdot: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('subrange-type');
    diagram := new Diagram(title, 'subrange-type.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    constantExpression1 := new RuleBox('constant-expression');
    diagram.AddShape(0, 1, constantExpression1);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    dotdot := new Terminal('..');
    diagram.AddShape(0, 3, dotdot);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    constantExpression2 := new RuleBox('constant-expression');
    diagram.AddShape(0, 5, constantExpression2);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, constantExpression1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constantExpression1, dotdot, east, noDir));
    diagram.AddConnector(new SyntaxArrow(dotdot, constantExpression2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constantExpression2, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeEnumeratedTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4: Gap;
    lparen, rparen: Terminal;
    identifierList: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('enumerated-type');
    diagram := new Diagram(title, 'enumerated-type.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    lparen := new Terminal('(');
    diagram.AddShape(0, 1, lparen);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    identifierList := new RuleBox('identifier-list');
    diagram.AddShape(0, 3, identifierList);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    rparen := new Terminal(')');
    diagram.AddShape(0, 5, rparen);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, identifierList, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifierList, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rparen, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeOrdinalTypeNameDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    integerType, booleanType, charType: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('ordinal-type-name');
    diagram := new Diagram(title, 'ordinal-type-name.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    integerType := new Keyword('integer');
    diagram.AddShape(0, 1, integerType);
    booleanType := new Keyword('boolean');
    diagram.AddShape(1, 1, booleanType);
    charType := new Keyword('char');
    diagram.AddShape(2, 1, charType);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, integerType, east, noDir));
    diagram.AddConnector(new SyntaxArrow(integerType, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, booleanType, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, charType, south, east));
    diagram.AddConnector(new SyntaxArrow(booleanType, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(charType, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeRealTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    realKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('real-type');
    diagram := new Diagram(title, 'real-type.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    realKeyword := new Keyword('real');
    diagram.AddShape(0, 1, realKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, realKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(realKeyword, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeStringTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    stringKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('string-type');
    diagram := new Diagram(title, 'string-type.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    stringKeyword := new Keyword('string');
    diagram.AddShape(0, 1, stringKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, stringKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(stringKeyword, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakePointerTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    pointerKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('pointer-type');
    diagram := new Diagram(title, 'pointer-type.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    pointerKeyword := new Keyword('pointer');
    diagram.AddShape(0, 1, pointerKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, pointerKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(pointerKeyword, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeObjectTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3: Gap;
    objectKeyword: Keyword;
    branch1, branch2: Branch;
    heritage, componentList: RuleBox;
    endKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('object-type');
    diagram := new Diagram(title, 'object-type.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    objectKeyword := new Keyword('object');
    diagram.AddShape(0, 1, objectKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    heritage := new RuleBox('heritage');
    diagram.AddShape(1, 3, heritage);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    componentList := new RuleBox('component-list');
    diagram.AddShape(0, 5, componentList);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    endKeyword := new Keyword('end');
    diagram.AddShape(0, 7, endKeyword);
    gap3 := new Gap();
    diagram.AddShape(0, 8, gap3);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, objectKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(objectKeyword, componentList, east, noDir));
    diagram.AddConnector(new SyntaxArrow(componentList, endKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(endKeyword, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, heritage, south, east));
    diagram.AddConnector(new SyntaxArrow(heritage, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeHeritageDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4: Gap;
    lparen, rparen: Terminal;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('heritage');
    diagram := new Diagram(title, 'heritage.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    lparen := new Terminal('(');
    diagram.AddShape(0, 1, lparen);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 3, identifier);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    rparen := new Terminal(')');
    diagram.AddShape(0, 5, rparen);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rparen, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeComponentListDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1: Branch;
    branch2: Branch;
    branch3: Branch;
    branch4: Branch;
    objectFieldList: RuleBox;
    methodList: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('component-list');
    diagram := new Diagram(title, 'component-list.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    objectFieldList := new RuleBox('object-field-list');
    diagram.AddShape(1, 1, objectFieldList);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    branch3 := new Branch();
    diagram.AddShape(0, 3, branch3);
    methodList := new RuleBox('method-list');
    diagram.AddShape(1, 4, methodList);
    branch4 := new Branch();
    diagram.AddShape(0, 5, branch4);
    out := new Out();
    diagram.AddShape(0, 6, out);
    diagram.AddConnector(new SyntaxArrow(title, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, objectFieldList, south, east));
    diagram.AddConnector(new SyntaxArrow(objectFieldList, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(branch3, methodList, south, east));
    diagram.AddConnector(new SyntaxArrow(methodList, branch4, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeObjectFieldListDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    identifierList: RuleBox;
    colon: Terminal;
    typeRule: RuleBox;
    semicolon: Terminal;
    out: Out;
  begin
      title := new DiagramTitle('object-field-list');
    diagram := new Diagram(title, 'object-field-list.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifierList := new RuleBox('identifier-list');
    diagram.AddShape(0, 1, identifierList);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    colon := new Terminal(':');
    diagram.AddShape(0, 3, colon);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    typeRule := new RuleBox('type');
    diagram.AddShape(0, 5, typeRule);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    semicolon := new Terminal(';');
    diagram.AddShape(0, 7, semicolon);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, identifierList, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifierList, colon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(colon, typeRule, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeRule, semicolon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeMethodListDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    methodHeading: RuleBox;
    gap1: Gap;
    semicolon: Terminal;
    out: Out;
    routingPoint: RoutingPoint;
  begin
    title := new DiagramTitle('method-list');
    diagram := new Diagram(title, 'method-list.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    methodHeading := new RuleBox('method-heading');
    diagram.AddShape(0, 1, methodHeading);
    gap1 := new Gap();
    diagram.AddShape(0, 2, gap1);
    semicolon := new Terminal(';');
    diagram.AddShape(0, 3, semicolon);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    out := new Out();
    diagram.AddShape(0, 5, out);
    routingPoint := new RoutingPoint();
    diagram.AddShape(1, 1, routingPoint);
    diagram.AddConnector(new SyntaxArrow(title, methodHeading, east, noDir));
    diagram.AddConnector(new SyntaxArrow(methodHeading, semicolon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon, out, east, noDir));
    diagram.AddConnector(new SyntaxLine(branch2, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeMethodHeadingDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch0, branch1, branch2, branch3, branch4, branch5: Branch;
    procedureHeading, functionHeading, constructorHeading: RuleBox;
    semicolon1, semicolon2: Terminal;
    gap1: Gap;
    virtuality1, virtuality2: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('method-heading');
    diagram := new Diagram(title, 'method-heading.png');
    branch0 := new Branch();
    diagram.AddShape(0, 0, branch0);
    branch1 := new Branch();
    diagram.AddShape(0, 1, branch1);
    procedureHeading := new RuleBox('procedure-heading');
    diagram.AddShape(0, 2, procedureHeading);
    functionHeading := new RuleBox('function-heading');
    diagram.AddShape(1, 2, functionHeading);
    branch2 := new Branch();
    diagram.AddShape(0, 3, branch2);
    branch3 := new Branch();
    diagram.AddShape(0, 4, branch3);
    semicolon1 := new Terminal(';');
    diagram.AddShape(1, 5, semicolon1);
    gap1 := new Gap();
    diagram.AddShape(1, 6, gap1);
    virtuality1 := new RuleBox('virtuality');
    diagram.AddShape(1, 7, virtuality1);
    branch4 := new Branch();
    diagram.AddShape(0, 8, branch4);
    branch5 := new Branch();
    diagram.AddShape(0, 9, branch5);
    constructorHeading := new RuleBox('constructor-heading');
    diagram.AddShape(2, 2, constructorHeading);
    out := new Out();
    diagram.AddShape(0, 10, out);
    diagram.AddConnector(new SyntaxArrow(title, procedureHeading, east, noDir));
    diagram.AddConnector(new SyntaxArrow(procedureHeading, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, functionHeading, south, east));
    diagram.AddConnector(new SyntaxArrow(functionHeading, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(branch3, semicolon1, south, east));
    diagram.AddConnector(new SyntaxArrow(semicolon1, virtuality1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(virtuality1, branch4, east, north));
    diagram.AddConnector(new SyntaxArrow(branch0, constructorHeading, south, east));
    diagram.AddConnector(new SyntaxArrow(constructorHeading, branch5, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeVirtualityDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    virtualKeyword, overrideKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('virtuality');
    diagram := new Diagram(title, 'virtuality.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    virtualKeyword := new Keyword('virtual');
    diagram.AddShape(0, 1, virtualKeyword);
    overrideKeyword := new Keyword('override');
    diagram.AddShape(1, 1, overrideKeyword);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, virtualKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(virtualKeyword, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, overrideKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(overrideKeyword, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeVariableDeclarationPartDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1: Gap;
    varKeyword: Keyword;
    branch1, branch2: Branch;
    variableDeclaration: RuleBox;
    routingPoint: RoutingPoint;
    out: Out;
  begin
    title := new DiagramTitle('variable-declaration-part');
    diagram := new Diagram(title, 'variable-declaration-part.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    varKeyword := new Keyword('var');
    diagram.AddShape(0, 1, varKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    variableDeclaration := new RuleBox('variable-declaration');
    diagram.AddShape(0, 3, variableDeclaration);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    out := new Out();
    diagram.AddShape(0, 5, out);
    routingPoint := new RoutingPoint();
    diagram.AddShape(1, 3, routingPoint);
    diagram.AddConnector(new SyntaxArrow(title, varKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(varKeyword, variableDeclaration, east, noDir));
    diagram.AddConnector(new SyntaxArrow(variableDeclaration, out, east, noDir));
    diagram.AddConnector(new SyntaxLine(branch2, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeVariableDeclarationDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    identifierList: RuleBox;
    colon, semicolon: Terminal;
    typeRule: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('variable-declaration');
    diagram := new Diagram(title, 'variable-declaration.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifierList := new RuleBox('identifier-list');
    diagram.AddShape(0, 1, identifierList);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    colon := new Terminal(':');
    diagram.AddShape(0, 3, colon);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    typeRule := new RuleBox('type');
    diagram.AddShape(0, 5, typeRule);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    semicolon := new Terminal(';');
    diagram.AddShape(0, 7, semicolon);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, identifierList, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifierList, colon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(colon, typeRule, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeRule, semicolon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeUnitDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5, gap6, gap7: Gap;
    unitHeading: RuleBox;
    semicolon: Terminal;
    interfacePart: RuleBox;
    implementationPart: RuleBox;
    initializationPart: RuleBox;
    dot: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('unit');
    diagram := new Diagram(title, 'unit.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    unitHeading := new RuleBox('unit-heading');
    diagram.AddShape(0, 1, unitHeading);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    semicolon := new Terminal(';');
    diagram.AddShape(0, 3, semicolon);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    interfacePart := new RuleBox('interface-part');
    diagram.AddShape(0, 5, interfacePart);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    implementationPart := new RuleBox('implementation-part');
    diagram.AddShape(0, 7, implementationPart);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    initializationPart := new RuleBox('initialization-part');
    diagram.AddShape(0, 9, initializationPart);
    gap6 := new Gap();
    diagram.AddShape(0, 10, gap6);
    dot := new Terminal('.');
    diagram.AddShape(0, 11, dot);
    gap7 := new Gap();
    diagram.AddShape(0, 12, gap7);
    out := new Out();
    diagram.AddShape(0, 13, out);
    diagram.AddConnector(new SyntaxArrow(title, unitHeading, east, noDir));
    diagram.AddConnector(new SyntaxArrow(unitHeading, semicolon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon, interfacePart, east, noDir));
    diagram.AddConnector(new SyntaxArrow(interfacePart, implementationPart, east, noDir));
    diagram.AddConnector(new SyntaxArrow(implementationPart, initializationPart, east, noDir));
    diagram.AddConnector(new SyntaxArrow(initializationPart, dot, east, noDir));
    diagram.AddConnector(new SyntaxArrow(dot, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeUnitHeadingDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3: Gap;
    unitKeyword: Keyword;
    unitName: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('unit-heading');
    diagram := new Diagram(title, 'unit-heading.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    unitKeyword := new Keyword('unit');
    diagram.AddShape(0, 1, unitKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    unitName := new RuleBox('unit-name');
    diagram.AddShape(0, 3, unitName);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, unitKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(unitKeyword, unitName, east, noDir));
    diagram.AddConnector(new SyntaxArrow(unitName, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeInterfacePartDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    interfaceKeyword: Keyword;
    branch1, branch2, branch3, branch4, branch5, branch6: Branch;
    usesClause: RuleBox;
    out: Out;
    constantDeclarationPart: RuleBox;
    typeDeclarationPart: RuleBox;
    variableDeclarationPart: RuleBox;
    procedureAndFunctionHeadingPart: RuleBox;
    routingPoint: RoutingPoint;
  begin
    title := new DiagramTitle('interface-part');
    diagram := new Diagram(title, 'interface-part.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    interfaceKeyword := new Keyword('interface');
    diagram.AddShape(0, 1, interfaceKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    usesClause := new RuleBox('uses-clause');
    diagram.AddShape(1, 3, usesClause);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    branch3 := new Branch();
    diagram.AddShape(0, 5, branch3);
    branch4 := new Branch();
    diagram.AddShape(0, 6, branch4);
    constantDeclarationPart := new RuleBox('constant-declaration-part');
    diagram.AddShape(1, 7, constantDeclarationPart);
    typeDeclarationPart := new RuleBox('type-declaration-part');
    diagram.AddShape(2, 7, typeDeclarationPart);
    variableDeclarationPart := new RuleBox('variable-declaration-part');
    diagram.AddShape(3, 7, variableDeclarationPart);
    procedureAndFunctionHeadingPart := new RuleBox('procedure-and-function-heading-part');
    diagram.AddShape(4, 7, procedureAndFunctionHeadingPart);
    branch5 := new Branch();
    diagram.AddShape(0, 8, branch5);
    branch6 := new Branch();
    diagram.AddShape(0, 9, branch6);
    routingPoint := new RoutingPoint();
    diagram.AddShape(5, 7, routingPoint);
    out := new Out();
    diagram.AddShape(0, 10, out);
    diagram.AddConnector(new SyntaxArrow(title, interfaceKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(interfaceKeyword, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, usesClause, south, east));
    diagram.AddConnector(new SyntaxArrow(usesClause, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(branch4, constantDeclarationPart, south, east));
    diagram.AddConnector(new SyntaxArrow(branch4, typeDeclarationPart, south, east));
    diagram.AddConnector(new SyntaxArrow(branch4, variableDeclarationPart, south, east));
    diagram.AddConnector(new SyntaxArrow(branch4, procedureAndFunctionHeadingPart, south, east));
    diagram.AddConnector(new SyntaxArrow(constantDeclarationPart, branch5, east, north));
    diagram.AddConnector(new SyntaxArrow(typeDeclarationPart, branch5, east, north));
    diagram.AddConnector(new SyntaxArrow(variableDeclarationPart, branch5, east, north));
    diagram.AddConnector(new SyntaxArrow(procedureAndFunctionHeadingPart, branch5, east, north));
    diagram.AddConnector(new SyntaxLine(branch6, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch3, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeProcedureAndFunctionHeadingPart();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    procedureHeading, functionHeading: RuleBox;
    semicolon: Terminal;
    gap1: Gap;
    out: Out;
  begin
    title := new DiagramTitle('procedure-and-function-heading-part');
    diagram := new Diagram(title, 'procedure-and-function-heading-part.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    procedureHeading := new RuleBox('procedure-heading');
    diagram.AddShape(0, 1, procedureHeading);
    functionHeading := new RuleBox('function-heading');
    diagram.AddShape(1, 1, functionHeading);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    semicolon := new Terminal(';');
    diagram.AddShape(0, 3, semicolon);
    gap1 := new Gap();
    diagram.AddShape(0, 4, gap1);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, procedureHeading, east, noDir));
    diagram.AddConnector(new SyntaxArrow(procedureHeading, semicolon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, functionHeading, south, east));
    diagram.AddConnector(new SyntaxArrow(functionHeading, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeProcedureHeadingDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4: Gap;
    procedureKeyword: Keyword;
    procedureName: RuleBox;
    parameterList: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('procedure-heading');
    diagram := new Diagram(title, 'procedure-heading.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    procedureKeyword := new Keyword('procedure');
    diagram.AddShape(0, 1, procedureKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    procedureName := new RuleBox('procedure-name');
    diagram.AddShape(0, 3, procedureName);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    parameterList := new RuleBox('parameter-list');
    diagram.AddShape(0, 5, parameterList);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, procedureKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(procedureKeyword, procedureName, east, noDir));
    diagram.AddConnector(new SyntaxArrow(procedureName, parameterList, east, noDir));
    diagram.AddConnector(new SyntaxArrow(parameterList, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeProcedureNameDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier1, identifier2: RuleBox;
    dot: Terminal;
    branch1, branch2: Branch;
    out: Out;
  begin
    title := new DiagramTitle('procedure-name');
    diagram := new Diagram(title, 'procedure-name.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier1 := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier1);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    dot := new Terminal('.');
    diagram.AddShape(1, 3, dot);
    gap2 := new Gap();
    diagram.AddShape(1, 4, gap2);
    identifier2 := new RuleBox('identifier');
    diagram.AddShape(1, 5, identifier2);
    branch2 := new Branch();
    diagram.AddShape(0, 6, branch2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier1, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, dot, south, east));
    diagram.AddConnector(new SyntaxArrow(dot, identifier2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier2, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeFunctionHeadingDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5, gap6: Gap;
    functionKeyword: Keyword;
    functionName: RuleBox;
    parameterList: RuleBox;
    colon: Terminal;
    resultType: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('function-heading');
    diagram := new Diagram(title, 'function-heading.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    functionKeyword := new Keyword('function');
    diagram.AddShape(0, 1, functionKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    functionName := new RuleBox('function-name');
    diagram.AddShape(0, 3, functionName);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    parameterList := new RuleBox('parameter-list');
    diagram.AddShape(0, 5, parameterList);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    colon := new Terminal(':');
    diagram.AddShape(0, 7, colon);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    resultType := new RuleBox('result-type');
    diagram.AddShape(0, 9, resultType);
    gap6 := new Gap();
    diagram.AddShape(0, 10, gap6);
    out := new Out();
    diagram.AddShape(0, 11, out);
    diagram.AddConnector(new SyntaxArrow(title, functionKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(functionKeyword, functionName, east, noDir));
    diagram.AddConnector(new SyntaxArrow(functionName, parameterList, east, noDir));
    diagram.AddConnector(new SyntaxArrow(parameterList, colon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(colon, resultType, east, noDir));
    diagram.AddConnector(new SyntaxArrow(resultType, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeFunctionNameDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier1, identifier2: RuleBox;
    dot: Terminal;
    branch1, branch2: Branch;
    out: Out;
  begin
    title := new DiagramTitle('function-name');
    diagram := new Diagram(title, 'function-name.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier1 := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier1);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    dot := new Terminal('.');
    diagram.AddShape(1, 3, dot);
    gap2 := new Gap();
    diagram.AddShape(1, 4, gap2);
    identifier2 := new RuleBox('identifier');
    diagram.AddShape(1, 5, identifier2);
    branch2 := new Branch();
    diagram.AddShape(0, 6, branch2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier1, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, dot, south, east));
    diagram.AddConnector(new SyntaxArrow(dot, identifier2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier2, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeResultTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    typeName: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('result-type');
    diagram := new Diagram(title, 'result-type.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    typeName := new RuleBox('type-name');
    diagram.AddShape(0, 1, typeName);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, typeName, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeName, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeSubroutineDeclarationPartDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2, branch3, branch4: Branch;
    procedureDeclaration: RuleBox;
    functionDeclaration: RuleBox;
    constructorDeclaration: RuleBox;
    routingPoint: RoutingPoint;
    out: Out;
  begin
    title := new DiagramTitle('subroutine-declaration-part');
    diagram := new Diagram(title, 'subroutine-declaration-part.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    branch2 := new Branch();
    diagram.AddShape(0, 1, branch2);
    procedureDeclaration := new RuleBox('procedure-declaration');
    diagram.AddShape(0, 2, procedureDeclaration);
    functionDeclaration := new RuleBox('function-declaration');
    diagram.AddShape(1, 2, functionDeclaration);
    constructorDeclaration := new RuleBox('constructor-declaration');
    diagram.AddShape(2, 2, constructorDeclaration);
    branch3 := new Branch();
    diagram.AddShape(0, 3, branch3);
    branch4 := new Branch();
    diagram.AddShape(0, 4, branch4);
    routingPoint := new RoutingPoint();
    diagram.AddShape(3, 2, routingPoint);
    out := new Out();
    diagram.AddShape(0, 5, out);
    diagram.AddConnector(new SyntaxArrow(title, procedureDeclaration, east, noDir));
    diagram.AddConnector(new SyntaxArrow(procedureDeclaration, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, functionDeclaration, south, east));
    diagram.AddConnector(new SyntaxArrow(branch2, constructorDeclaration, south, east));
    diagram.AddConnector(new SyntaxArrow(functionDeclaration, branch3, east, north));
    diagram.AddConnector(new SyntaxArrow(constructorDeclaration, branch3, east, north));
    diagram.AddConnector(new SyntaxLine(branch4, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeProcedureDeclarationDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    procedureHeading: RuleBox;
    semicolon1, semicolon2: Terminal;
    subroutineBlock: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('procedure-declaration');
    diagram := new Diagram(title, 'procedure-declaration.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    procedureHeading := new RuleBox('procedure-heading');
    diagram.AddShape(0, 1, procedureHeading);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    semicolon1 := new Terminal(';');
    diagram.AddShape(0, 3, semicolon1);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    subroutineBlock := new RuleBox('subroutine-block');
    diagram.AddShape(0, 5, subroutineBlock);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    semicolon2 := new Terminal(';');
    diagram.AddShape(0, 7, semicolon2);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, procedureHeading, east, noDir));
    diagram.AddConnector(new SyntaxArrow(procedureHeading, semicolon1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon1, subroutineBlock, east, noDir));
    diagram.AddConnector(new SyntaxArrow(subroutineBlock, semicolon2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon2, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeSubroutineBlockDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    forwardKeyword, externalKeyword: Keyword;
    block: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('subroutine-block');
    diagram := new Diagram(title, 'subroutine-block.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    forwardKeyword := new Keyword('forward');
    diagram.AddShape(0, 1, forwardKeyword);
    externalKeyword := new Keyword('external');
    diagram.AddShape(1, 1, externalKeyword);
    block := new RuleBox('block');
    diagram.AddShape(2, 1, block);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, forwardKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(forwardKeyword, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, externalKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, block, south, east));
    diagram.AddConnector(new SyntaxArrow(externalKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(block, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeFunctionDeclarationDiagram(); 
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    functionHeading: RuleBox;
    semicolon1, semicolon2: Terminal;
    subroutineBlock: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('function-declaration');
    diagram := new Diagram(title, 'function-declaration.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    functionHeading := new RuleBox('function-heading');
    diagram.AddShape(0, 1, functionHeading);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    semicolon1 := new Terminal(';');
    diagram.AddShape(0, 3, semicolon1);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    subroutineBlock := new RuleBox('subroutine-block');
    diagram.AddShape(0, 5, subroutineBlock);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    semicolon2 := new Terminal(';');
    diagram.AddShape(0, 7, semicolon2);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, functionHeading, east, noDir));
    diagram.AddConnector(new SyntaxArrow(functionHeading, semicolon1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon1, subroutineBlock, east, noDir));
    diagram.AddConnector(new SyntaxArrow(subroutineBlock, semicolon2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon2, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeConstructorDeclarationDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    constructorHeading: RuleBox;
    branch1, branch2: Branch;
    constructorCall: RuleBox;
    semicolon1, semicolon2: Terminal;
    subroutineBlock: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('constructor-declaration');
    diagram := new Diagram(title, 'constructor-declaration.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    constructorHeading := new RuleBox('constructor-heading');
    diagram.AddShape(0, 1, constructorHeading);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    constructorCall := new RuleBox('constructor-call');
    diagram.AddShape(1, 3, constructorCall);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    semicolon1 := new Terminal(';');
    diagram.AddShape(0, 5, semicolon1);
    gap3 := new Gap();
    diagram.AddShape(0, 6, gap3);
    subroutineBlock := new RuleBox('subroutine-block');
    diagram.AddShape(0, 7, subroutineBlock);
    gap4 := new Gap();
    diagram.AddShape(0, 8, gap4);
    semicolon2 := new Terminal(';');
    diagram.AddShape(0, 9, semicolon2);
    gap5 := new Gap();
    diagram.AddShape(0, 10, gap5);
    out := new Out();
    diagram.AddShape(0, 11, out);
    diagram.AddConnector(new SyntaxArrow(title, constructorHeading, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constructorHeading, semicolon1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon1, subroutineBlock, east, noDir));
    diagram.AddConnector(new SyntaxArrow(subroutineBlock, semicolon2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(semicolon2, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, constructorCall, south, east));
    diagram.AddConnector(new SyntaxArrow(constructorCall, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeConstructorHeading();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    constructorKeyword: Keyword;
    branch1, branch2: Branch;
    objectName: RuleBox;
    parameterList: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('constructor-heading');
    diagram := new Diagram(title, 'constructor-heading.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    constructorKeyword := new Keyword('constructor');
    diagram.AddShape(0, 1, constructorKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    objectName := new RuleBox('object-name');
    diagram.AddShape(1, 3, objectName);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    parameterList := new RuleBox('parameter-list');
    diagram.AddShape(0, 5, parameterList);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, constructorKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(constructorKeyword, parameterList, east, noDir));
    diagram.AddConnector(new SyntaxArrow(parameterList, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, objectName, south, east));
    diagram.AddConnector(new SyntaxArrow(objectName, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeObjectNameDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    identifier: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('object-name');
    diagram := new Diagram(title, 'object-name.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    identifier := new RuleBox('identifier');
    diagram.AddShape(0, 1, identifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, identifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifier, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeConstructorCallDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    colon: Terminal;
    branch1, branch2, branch3, branch30, branch4, branch40: Branch;
    baseKeyword, thisKeyword: Keyword;
    lparen, rparen: Terminal;
    expression: RuleBox;
    comma: Terminal;
    routingPoint: RoutingPoint;
    out: Out;
  begin
    title := new DiagramTitle('constructor-call');
    diagram := new Diagram(title, 'constructor-call.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    colon := new Terminal(':');
    diagram.AddShape(0, 1, colon);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    baseKeyword := new Keyword('base');
    diagram.AddShape(0, 3, baseKeyword);
    thisKeyword := new Keyword('this');
    diagram.AddShape(1, 3, thisKeyword);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    lparen := new Terminal('(');
    diagram.AddShape(0, 5, lparen);
    branch30 := new Branch();
    diagram.AddShape(0, 6, branch30);
    branch3 := new Branch();
    diagram.AddShape(0, 7, branch3);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 8, expression);
    branch4 := new Branch();
    diagram.AddShape(0, 9, branch4);
    branch40 := new Branch();
    diagram.AddShape(0, 10, branch40);
    comma := new Terminal(',');
    diagram.AddShape(1, 8, comma);
    rparen := new Terminal(')');
    diagram.AddShape(0, 11, rparen);
    gap2 := new Gap();
    diagram.AddShape(0, 12, gap2);
    out := new Out();
    diagram.AddShape(0, 13, out);
    routingPoint := new RoutingPoint();
    diagram.AddShape(2, 8, routingPoint);
    diagram.AddConnector(new SyntaxArrow(title, colon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(colon, baseKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, thisKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(thisKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(baseKeyword, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, expression, east, noDir));
    diagram.AddConnector(new SyntaxLine(branch30, routingPoint, south, east));
    diagram.AddConnector(new SyntaxArrow(expression, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch4, comma, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch40, east, north));
    diagram.AddConnector(new SyntaxArrow(comma, branch3, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeIdentifierDiagram();
  var
    title: DiagramTitle;
    diagram:  Diagram;
    gap1: Gap;
    letter1, letter2, digit: RuleBox;
    out: Out;
    branch1, branch2: Branch;
  begin
    title := new DiagramTitle('identifier');
    diagram := new Diagram(title, 'identifier.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    letter1 := new RuleBox('letter');
    diagram.AddShape(0, 1, letter1);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    letter2 := new RuleBox('letter');
    diagram.AddShape(1, 1, letter2);
    digit := new RuleBox('digit');
    diagram.AddShape(2, 1, digit);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, letter1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(letter1, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, letter2, south, west));
    diagram.AddConnector(new SyntaxArrow(branch2, digit, south, west));
    diagram.AddConnector(new SyntaxArrow(letter2, branch1, west, north));
    diagram.AddConnector(new SyntaxArrow(digit, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeLetterDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1: Branch;
    branch2: Branch;
    locaseA, locaseZ, uppercaseA, uppercaseZ, underscore: Terminal;
    range1, range2: TerminalNoFrame;
    out: Out;
  begin
    title := new DiagramTitle('letter');
    diagram := new Diagram(title, 'letter.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    locaseA := new Terminal('a');
    diagram.AddShape(0, 1, locaseA);
    range1 := new TerminalNoFrame('...');
    diagram.AddShape(1, 1, range1);
    locaseZ := new Terminal('z');
    diagram.AddShape(2, 1, locaseZ);
    uppercaseA := new Terminal('A');
    diagram.AddShape(3, 1, uppercaseA);
    range2 := new TerminalNoFrame('...');
    diagram.AddShape(4, 1, range2);
    uppercaseZ := new Terminal('Z');
    diagram.AddShape(5, 1, uppercaseZ);
    underscore := new Terminal('_');
    diagram.AddShape(6, 1, underscore);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, locaseA, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, locaseZ, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, uppercaseA, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, uppercaseZ, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, underscore, south, east));
    diagram.AddConnector(new SyntaxArrow(locaseA, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(locaseZ, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(uppercaseA, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(uppercaseZ, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(underscore, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeDigitDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    zero, nine: Terminal;
    range: TerminalNoFrame;
    out: Out;
  begin
    title := new DiagramTitle('digit');
    diagram := new Diagram(title, 'digit.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    zero := new Terminal('0');
    diagram.AddShape(0, 1, zero);
    range := new TerminalNoFrame('...');
    diagram.AddShape(1, 1, range);
    nine := new Terminal('9');
    diagram.AddShape(2, 1, nine);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, zero, east, noDir));
    diagram.AddConnector(new SyntaxArrow(zero, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, nine, south, east));
    diagram.AddConnector(new SyntaxArrow(nine, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeHexDigitDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    zero, nine: Terminal;
    range: TerminalNoFrame;
    range2, range3: TerminalNoFrame;
    out: Out;
    locaseA, locaseF, uppercaseA, uppercaseF: Terminal;
  begin
    title := new DiagramTitle('hex-digit');
    diagram := new Diagram(title, 'hex-digit.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    zero := new Terminal('0');
    diagram.AddShape(0, 1, zero);
    range := new TerminalNoFrame('...');
    diagram.AddShape(1, 1, range);
    nine := new Terminal('9');
    diagram.AddShape(2, 1, nine);
    locaseA := new Terminal('a');
    diagram.AddShape(3, 1, locaseA);
    range2 := new TerminalNoFrame('...');
    diagram.AddShape(4, 1, range2);
    locaseF := new Terminal('f');
    diagram.AddShape(5, 1, locaseF);
    uppercaseA := new Terminal('A');
    diagram.AddShape(6, 1, uppercaseA);
    range3 := new TerminalNoFrame('...');
    diagram.AddShape(7, 1, range3);
    uppercaseF := new Terminal('F');
    diagram.AddShape(8, 1, uppercaseF);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, zero, east, noDir));
    diagram.AddConnector(new SyntaxArrow(zero, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, nine, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, locaseA, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, locaseF, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, uppercaseA, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, uppercaseF, south, east));
    diagram.AddConnector(new SyntaxArrow(nine, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(locaseA, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(locaseF, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(uppercaseA, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(uppercaseF, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeDigitSequenceDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    digit: RuleBox;
    routingPoint: RoutingPoint;
    out: Out;
  begin
    title := new DiagramTitle('digit-sequence');
    diagram := new Diagram(title, 'digit-sequence.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    digit := new RuleBox('digit');
    diagram.AddShape(0, 1, digit);
    routingPoint := new RoutingPoint();
    diagram.AddShape(1, 1, routingPoint);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, digit, east, noDir));
    diagram.AddConnector(new SyntaxArrow(digit, out, east, noDir));
    diagram.AddConnector(new SyntaxLine(branch2, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeHexDigitSequenceDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    hexdigit: RuleBox;
    routingPoint: RoutingPoint;
    out: Out;
  begin
    title := new DiagramTitle('hex-digit-sequence');
    diagram := new Diagram(title, 'hex-digit-sequence.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    hexdigit := new RuleBox('hex-digit');
    diagram.AddShape(0, 1, hexdigit);
    routingPoint := new RoutingPoint();
    diagram.AddShape(1, 1, routingPoint);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, hexdigit, east, noDir));
    diagram.AddConnector(new SyntaxArrow(hexdigit, out, east, noDir));
    diagram.AddConnector(new SyntaxLine(branch2, routingPoint, south, west));
    diagram.AddConnector(new SyntaxArrow(routingPoint, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeCommentDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    braceComment, parenComment: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('comment');
    diagram := new Diagram(title, 'comment.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    braceComment := new RuleBox('brace-comment');
    diagram.AddShape(0, 1, braceComment);
    parenComment := new RuleBox('paren-comment');
    diagram.AddShape(1, 1, parenComment);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, braceComment, east, noDir));
    diagram.AddConnector(new SyntaxArrow(braceComment, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, parenComment, south, east));
    diagram.AddConnector(new SyntaxArrow(parenComment, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeBraceCommentDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    brace1, brace2: Terminal;
    noBraceRule: RuleBox;
    branch1, branch2: Branch;
    out: Out;
  begin
    title := new DiagramTitle('brace-comment');
    diagram := new Diagram(title, 'brace-comment.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    brace1 := new Terminal('{');
    diagram.AddShape(0, 1, brace1);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    noBraceRule := new RuleBox('any character except }');
    diagram.AddShape(1, 3, noBraceRule);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    brace2 := new Terminal('}');
    diagram.AddShape(0, 5, brace2);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, brace1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(brace1, brace2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(brace2, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, noBraceRule, south, west));
    diagram.AddConnector(new SyntaxArrow(noBraceRule, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeParenCommentDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4: Gap;
    lparen, rparen, star1, star2: Terminal;
    branch1, branch2: Branch;
    noParenRule: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('paren-comment');
    diagram := new Diagram(title, 'paren-comment.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    lparen := new Terminal('(');
    diagram.AddShape(0, 1, lparen);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    star1 := new Terminal('*');
    diagram.AddShape(0, 3, star1);
    branch1 := new Branch();
    diagram.AddShape(0, 4, branch1);
    noParenRule := new RuleBox('any character except * followed by )');
    diagram.AddShape(1, 5, noParenRule);
    branch2 := new Branch();
    diagram.AddShape(0, 6, branch2);
    star2 := new Terminal('*');
    diagram.AddShape(0, 7, star2);
    gap3 := new Gap();
    diagram.AddShape(0, 8, gap3);
    rparen := new Terminal(')');
    diagram.AddShape(0, 9, rparen);
    gap4 := new Gap();
    diagram.AddShape(0, 10, gap4);
    out := new Out();
    diagram.AddShape(0, 11, out);
    diagram.AddConnector(new SyntaxArrow(title, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, star1, east, noDir));
    diagram.AddConnector(new SyntaxArrow(star1, star2, east, noDir));
    diagram.AddConnector(new SyntaxArrow(star2, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rparen, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch2, noParenRule, south, west));
    diagram.AddConnector(new SyntaxArrow(noParenRule, branch1, west, north));
    AddDiagram(diagram);
  end;

  procedure MakeParameterListDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    lparen, rparen: Terminal;
    branch1, branch2, branch3, branch4: Branch;
    parameterDeclaration: RuleBox;
    semicolon: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('parameter-list');
    diagram := new Diagram(title, 'parameter-list.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    lparen := new Terminal('(');
    diagram.AddShape(0, 1, lparen);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    branch2 := new Branch();
    diagram.AddShape(1, 3, branch2);
    parameterDeclaration := new RuleBox('parameter-declaration');
    diagram.AddShape(1, 4, parameterDeclaration);
    branch3 := new Branch();
    diagram.AddShape(1, 5, branch3);
    semicolon := new Terminal(';');
    diagram.AddShape(2, 4, semicolon);
    branch4 := new Branch();
    diagram.AddShape(0, 6, branch4);
    rparen := new Terminal(')');
    diagram.AddShape(0, 7, rparen);
    gap2 := new Gap();
    diagram.AddShape(0, 8, gap2);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rparen, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch4, parameterDeclaration, south, west));
    diagram.AddConnector(new SyntaxArrow(parameterDeclaration, branch1, west, north));
    diagram.AddConnector(new SyntaxArrow(branch2, semicolon, south, east));
    diagram.AddConnector(new SyntaxArrow(semicolon, branch3, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeParameterDeclarationDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2, gap3, gap4, gap5: Gap;
    parameterQualifier, identifierList, typeRule: RuleBox;
    colon: Terminal;
    out: Out;
  begin
    title := new DiagramTitle('parameter-declaration');
    diagram := new Diagram(title, 'parameter-declaration.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    parameterQualifier := new RuleBox('parameter-qualifier');
    diagram.AddShape(0, 1, parameterQualifier);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    identifierList := new RuleBox('identifier-list');
    diagram.AddShape(0, 3, identifierList);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    colon := new Terminal(':');
    diagram.AddShape(0, 5, colon);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    typeRule := new RuleBox('type');
    diagram.AddShape(0, 7, typeRule);
    gap5 := new Gap();
    diagram.AddShape(0, 8, gap5);
    out := new Out();
    diagram.AddShape(0, 9, out);
    diagram.AddConnector(new SyntaxArrow(title, parameterQualifier, east, noDir));
    diagram.AddConnector(new SyntaxArrow(parameterQualifier, identifierList, east, noDir));
    diagram.AddConnector(new SyntaxArrow(identifierList, colon, east, noDir));
    diagram.AddConnector(new SyntaxArrow(colon, typeRule, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeRule, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeParameterQualifierDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    varKeyword, constKeyword: Keyword;
    out: Out;
  begin
    title := new DiagramTitle('parameter-qualifier');
    diagram := new Diagram(title, 'parameter-qualifier.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    varKeyword := new Keyword('var');
    diagram.AddShape(1, 1, varKeyword);
    constKeyword := new Keyword('const');
    diagram.AddShape(2, 1, constKeyword);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, varKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(branch1, constKeyword, south, east));
    diagram.AddConnector(new SyntaxArrow(varKeyword, branch2, east, north));
    diagram.AddConnector(new SyntaxArrow(constKeyword, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeArrayTypeDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    arrayKeyword, ofKeyword: Keyword;
    gap1, gap2, gap3, gap4: Gap;
    typeRule: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('array-type');
    diagram := new Diagram(title, 'array-type.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    arrayKeyword := new Keyword('array');
    diagram.AddShape(0, 1, arrayKeyword);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    ofKeyword := new Keyword('of');
    diagram.AddShape(0, 3, ofKeyword);
    gap3 := new Gap();
    diagram.AddShape(0, 4, gap3);
    typeRule := new RuleBox('type');
    diagram.AddShape(0, 5, typeRule);
    gap4 := new Gap();
    diagram.AddShape(0, 6, gap4);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, arrayKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(arrayKeyword, ofKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(ofKeyword, typeRule, east, noDir));
    diagram.AddConnector(new SyntaxArrow(typeRule, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeArgumentListDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    lparen, rparen: Terminal;
    branch1, branch2, branch3, branch4: Branch;
    argument: RuleBox;
    out: Out;
    comma: Terminal;
  begin
    title := new DiagramTitle('argument-list');
    diagram := new Diagram(title, 'argument-list.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    lparen := new Terminal('(');
    diagram.AddShape(0, 1, lparen);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    branch2 := new Branch();
    diagram.AddShape(1, 3, branch2);
    argument := new RuleBox('argument');
    diagram.AddShape(1, 4, argument);
    comma := new Terminal(',');
    diagram.AddShape(2, 4, comma);
    branch3 := new Branch();
    diagram.AddShape(1, 5, branch3);
    branch4 := new Branch();
    diagram.AddShape(0, 6, branch4);
    rparen := new Terminal(')');
    diagram.AddShape(0, 7, rparen);
    gap2 := new Gap();
    diagram.AddShape(0, 8, gap2);
    out := new Out();
    diagram.AddShape(0, 8, out);
    diagram.AddConnector(new SyntaxArrow(title, lparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(lparen, rparen, east, noDir));
    diagram.AddConnector(new SyntaxArrow(rparen, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch4, argument, south, west));
    diagram.AddConnector(new SyntaxArrow(argument, branch1, west, north));
    diagram.AddConnector(new SyntaxArrow(branch2, comma, south, east));
    diagram.AddConnector(new SyntaxArrow(comma, branch3, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeArgumentDiagram();
  var
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    expression: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('argument');
    diagram := new Diagram(title, 'argument.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    expression := new RuleBox('expression');
    diagram.AddShape(0, 1, expression);
    gap2 := new Gap();
    diagram.AddShape(0, 2, gap2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, expression, east, noDir));
    diagram.AddConnector(new SyntaxArrow(expression, out, east, noDir));
    AddDiagram(diagram);
  end;

  procedure MakeImplementationPartDiagram();
  var 
    title: DiagramTitle;
    diagram: Diagram;
    gap1, gap2: Gap;
    implementationKeyword: Keyword;
    branch1, branch2: Branch;
    usesClause: RuleBox;
    declarationPart: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('implementation-part');
    diagram := new Diagram(title, 'implementation-part.png');
    gap1 := new Gap();
    diagram.AddShape(0, 0, gap1);
    implementationKeyword := new Keyword('implementation');
    diagram.AddShape(0, 1, implementationKeyword);
    branch1 := new Branch();
    diagram.AddShape(0, 2, branch1);
    usesClause := new RuleBox('uses-clause');
    diagram.AddShape(1, 3, usesClause);
    branch2 := new Branch();
    diagram.AddShape(0, 4, branch2);
    declarationPart := new RuleBox('declaration-part');
    diagram.AddShape(0, 5, declarationPart);
    gap2 := new Gap();
    diagram.AddShape(0, 6, gap2);
    out := new Out();
    diagram.AddShape(0, 7, out);
    diagram.AddConnector(new SyntaxArrow(title, implementationKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(implementationKeyword, declarationPart, east, noDir));
    diagram.AddConnector(new SyntaxArrow(declarationPart, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, usesClause, south, east));
    diagram.AddConnector(new SyntaxArrow(usesClause, branch2, east, north));
    AddDiagram(diagram);
  end;

  procedure MakeInitializationPartDiagram(); 
  var
    title: DiagramTitle;
    diagram: Diagram;
    branch1, branch2: Branch;
    endKeyword: Keyword;
    statementPart: RuleBox;
    out: Out;
  begin
    title := new DiagramTitle('initialization-part');
    diagram := new Diagram(title, 'initialization-part.png');
    branch1 := new Branch();
    diagram.AddShape(0, 0, branch1);
    endKeyword := new Keyword('end');
    diagram.AddShape(0, 1, endKeyword);
    statementPart := new RuleBox('statement-part');
    diagram.AddShape(1, 1, statementPart);
    branch2 := new Branch();
    diagram.AddShape(0, 2, branch2);
    out := new Out();
    diagram.AddShape(0, 3, out);
    diagram.AddConnector(new SyntaxArrow(title, endKeyword, east, noDir));
    diagram.AddConnector(new SyntaxArrow(endKeyword, out, east, noDir));
    diagram.AddConnector(new SyntaxArrow(branch1, statementPart, south, east));
    diagram.AddConnector(new SyntaxArrow(statementPart, branch2, east, north));
    AddDiagram(diagram);
  end;

begin
  MakeProgramHeadingDiagram();
  MakeProgramIdDiagram();
  MakeProgramParameterListDiagram();
  MakeIdentifierListDiagram();
  MakeUnitNameDiagram();
  MakeUsesClauseDiagram();
  MakeProgramDiagram();
  MakeBlockDiagram();
  MakeDeclarationPartDiagram();
  MakeStatementPartDiagram();
  MakeStatementDiagram();
  MakeSimpleStatementDiagram();
  MakeAssignmentStatementDiagram();
  MakeProcedureStatementDiagram();
  MakeProcedureIdentifierDiagram();
  MakeStructuredStatementDiagram();
  MakeCompoundStatementDiagram();
  MakeConditionalStatementDiagram();
  MakeIfStatementDiagram();
  MakeCaseStatementDiagram();
  MakeCaseDiagram();
  MakeConstantRangeDiagram();
  MakeElsePartDiagram();
  MakeRepetitiveStatementDiagram();
  MakeRepeatStatementDiagram();
  MakeWhileStatementDiagram();
  MakeForStatementDiagram(); 
  MakeControlVariableDiagram();
  MakeVariableIdentifierDiagram();
  MakeInitialValueDiagram();
  MakeFinalValueDiagram();
  MakeDirectionDiagram();
  MakeExpressionDiagram();
  MakeRelationalOperatorDiagram();
  MakeConstantExpressionDiagram();
  MakeSimpleExpressionDiagram();
  MakeWeakOperatorDiagram();
  MakeTermDiagram();
  MakeStrongOperatorDiagram();
  MakeFactorDiagram();
  MakePrimaryDiagram();
  MakeVariableReferenceDiagram();
  MakeVariableTypecastDiagram();
  MakeTypeNameDiagram();
  MakeTypeIdentifierDiagram();
  MakeUnsignedConstantDiagram();
  MakeUnsignedNumberDiagram();
  MakeUnsignedIntegerDiagram();
  MakeUnsignedRealDiagram();
  MakeScaleFactorDiagram();
  MakeCharacterStringDiagram();
  MakeQuotedStringDiagram();
  MakeStringCharacterDiagram();
  MakeControlStringDiagram();
  MakeConstantIdentifierDiagram();
  MakeSignDiagram();
  MakeFunctionIdentifierDiagram();
  MakeValueTypecastDiagram();
  MakeNewExpressionDiagram();
  MakeFieldIdentifierDiagram();
  MakeMethodIdentifierDiagram();
  MakeQualifierDiagram();
  MakeIndexDiagram();
  MakeFieldDesignatorDiagram();
  MakeConstantDeclarationPartDiagram();
  MakeConstantDeclarationDiagram();
  MakeConstantDiagram();
  MakeArrayConstantDiagram();
  MakeObjectConstantDiagram();
  MakeFieldNameDiagram();
  MakeTypeDeclarationPartDiagram();
  MakeTypeDeclarationDiagram();
  MakeTypeDiagram();
  MakeSimpleTypeDiagram();
  MakeOrdinalTypeDiagram();
  MakeSubrangeTypeDiagram();
  MakeEnumeratedTypeDiagram();
  MakeOrdinalTypeNameDiagram();
  MakeRealTypeDiagram();
  MakeStringTypeDiagram();
  MakePointerTypeDiagram();
  MakeObjectTypeDiagram();
  MakeHeritageDiagram();
  MakeComponentListDiagram();
  MakeObjectFieldListDiagram();
  MakeMethodListDiagram();
  MakeMethodHeadingDiagram();
  MakeVirtualityDiagram();
  MakeVariableDeclarationPartDiagram();
  MakeVariableDeclarationDiagram();
  MakeUnitDiagram();
  MakeUnitHeadingDiagram();
  MakeInterfacePartDiagram();
  MakeProcedureAndFunctionHeadingPart();
  MakeProcedureHeadingDiagram();
  MakeProcedureNameDiagram();
  MakeFunctionHeadingDiagram();
  MakeFunctionNameDiagram();
  MakeResultTypeDiagram();
  MakeSubroutineDeclarationPartDiagram();
  MakeProcedureDeclarationDiagram();
  MakeSubroutineBlockDiagram();
  MakeFunctionDeclarationDiagram();
  MakeConstructorDeclarationDiagram();
  MakeConstructorHeading();
  MakeObjectNameDiagram();
  MakeConstructorCallDiagram();
  MakeIdentifierDiagram();
  MakeLetterDiagram();
  MakeDigitDiagram();
  MakeHexDigitDiagram();
  MakeDigitSequenceDiagram();
  MakeHexDigitSequenceDiagram();
  MakeCommentDiagram();
  MakeBraceCommentDiagram();
  MakeParenCommentDiagram();
  MakeParameterListDiagram();
  MakeParameterDeclarationDiagram();
  MakeParameterQualifierDiagram();
  MakeArrayTypeDiagram();
  MakeArgumentListDiagram();
  MakeArgumentDiagram();
  MakeImplementationPartDiagram();
  MakeInitializationPartDiagram();
end;

procedure MeasureDiagrams();
var
  i: integer;
  diagram: Diagram;
begin
  for i := 0 to diagramCount - 1 do 
  begin
    diagram := diagrams[i];
    diagram.Measure(initialGraphics);
  end;
end;

procedure PrintDiagrams();
var
  i: integer;
  diagram: Diagram;
begin
  for i := 0 to diagramCount - 1 do 
  begin
    diagram := diagrams[i];
    diagram.Print();
  end;
end;

procedure DrawDiagrams();
var
  i: integer;
  diagram: Diagram;
  bm: Bitmap;
  x, y: integer;
  graphics: Graphics;
  dir, filePath: string;
begin
  dir := 'C:/work/springpp/syntax/';
  for i := 0 to diagramCount - 1 do 
  begin
    diagram := diagrams[i];
    x := MMToPixels(diagram.bounds.size.w, dpiX);
    y := MMToPixels(diagram.bounds.size.h, dpiY);
    bm := new Bitmap(x, y);
    graphics := bm.GetGraphics();
    diagram.Draw(graphics);
    filePath := dir + diagram.fileName;
    bm.Save(filePath);
  end;
end;

begin
  x := MMToPixels(100, dpiX);
  y := MMToPixels(100, dpiY);
  initialBitmap := new Bitmap(x, y);
  initialGraphics := initialBitmap.GetGraphics();
  diagrams := new Diagram[0];
  diagramCount := 0;
  MakeDiagrams();
  MeasureDiagrams();
  PrintDiagrams();
  DrawDiagrams();
end.  
